<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Agile on Nikos Voulgaris</title>
        <link>//localhost:1313/tags/agile/</link>
        <description>Recent content in Agile on Nikos Voulgaris</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>Nikos Voulgaris</copyright>
        <lastBuildDate>Sun, 06 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="//localhost:1313/tags/agile/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>A different way to run the daily scrum</title>
        <link>//localhost:1313/a-different-way-to-run-the-daily-scrum/</link>
        <pubDate>Sun, 06 Nov 2022 00:00:00 +0000</pubDate>
        
        <guid>//localhost:1313/a-different-way-to-run-the-daily-scrum/</guid>
        <description>&lt;img src="//localhost:1313/img/posts/a_different_way_to_run_the_daily_scrum.jpg" alt="Featured image of post A different way to run the daily scrum" /&gt;&lt;p&gt;Have you ever felt that the daily scrum offers no value? That we are wasting some precious time and getting everybody tired at the same time?&lt;/p&gt;
&lt;p&gt;I decided to write this blog post, in order to challenge the formalistic way in which the daily scrum is often run and share an alternative format for it. I have been using this format for over 3 years now. I had to find myself as a new team member to an existing team to notice how useful it has been and to remember that it is not the default way to go.&lt;/p&gt;
&lt;p&gt;Our daily scrum was exhibiting some dysfunctional symptoms back then and we decided to adopt this approach as an experiment. It turned out so successful that we never changed it - although we tweaked it a few times. Today, I don&amp;rsquo;t remember if this technique was based on something I read at the time or not. Feel free to point me to any references that deserve credit in the comments section.&lt;/p&gt;
&lt;h2 id=&#34;symptoms&#34;&gt;
    &lt;a href=&#34;#symptoms&#34;&gt;#&lt;/a&gt;
    Symptoms
&lt;/h2&gt;&lt;p&gt;Before changing anything, we have to learn to identify the cases that call for change. For this purpose, I have listed some symptoms that I find to be good indicators. Let&amp;rsquo;s go over them.&lt;/p&gt;
&lt;h3 id=&#34;no-collaboration&#34;&gt;
    &lt;a href=&#34;#no-collaboration&#34;&gt;#&lt;/a&gt;
    No collaboration
&lt;/h3&gt;&lt;p&gt;During the daily scrum, team members share their input, but no fruitful communication takes place. To better understand this, let&amp;rsquo;s think of the following hypothetical daily scrum situations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Situation #1&lt;/strong&gt;: &lt;em&gt;Mark&lt;/em&gt;: &amp;ldquo;Yesterday, I finished the implementation and  opened a PR for this PBI. Today, I will start working on this one until I get some review feedback&amp;rdquo;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Situation #2&lt;/strong&gt;: &lt;em&gt;Mark&lt;/em&gt;: &amp;ldquo;Yesterday, I finished the implementation and  opened a PR for this PBI. Can somebody review it, please?&amp;rdquo; &lt;em&gt;Helen&lt;/em&gt;: &amp;ldquo;I would review it, but I don&amp;rsquo;t have time today. I will be able to review it tomorrow though.&amp;rdquo; &lt;em&gt;Jason&lt;/em&gt;: &amp;ldquo;I can do it. Let&amp;rsquo;s just make sure to upload it in a test environment too.&amp;rdquo; &lt;em&gt;Mark&lt;/em&gt;: &amp;ldquo;Thanks, guys. I&amp;rsquo;ll upload it and then I&amp;rsquo;ll work on this PBI until I hear back from you.&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mark is sharing the exact same input in both cases, but notice how the work progresses in the second situation. In the first case, the team is not collaborating.&lt;/p&gt;
&lt;h3 id=&#34;monologue&#34;&gt;
    &lt;a href=&#34;#monologue&#34;&gt;#&lt;/a&gt;
    Monologue
&lt;/h3&gt;&lt;p&gt;As mentioned above, the daily scrum is all about collaboration. If people are only speaking when their turn is up, how are they collaborating? Instead, a healthy team should be syncing and planning during the session. We should be hearing things like &amp;ldquo;Shall I use the test environment to test this?&amp;rdquo;, &amp;ldquo;I will release after the scrum. Do you want me to wait for this to be merged too?&amp;rdquo;, &amp;ldquo;Shall I merge this to your branch or to develop?&amp;rdquo;, &amp;ldquo;Do you need any help with this or shall I pick something up from the To-Dos?&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;People not being fully engaged, being indifferent and &lt;em&gt;only talking when their turn is up&lt;/em&gt; is a sign that clearly shows that the session is dysfunctional.&lt;/p&gt;
&lt;h3 id=&#34;no-planning-ahead&#34;&gt;
    &lt;a href=&#34;#no-planning-ahead&#34;&gt;#&lt;/a&gt;
    No planning ahead
&lt;/h3&gt;&lt;p&gt;The daily scrum is supposed to be a &lt;em&gt;planning session&lt;/em&gt;. Not a reporting session. Yes, we share the latest developments, but we do so in order to &lt;em&gt;plan the next 24 hours&lt;/em&gt;. Try to keep track of the planning/reporting ratio. If it decreases, it is a very bad sign. Of course, this cannot be easily measured, but keep an eye on it and try to draw some conclusions.&lt;/p&gt;
&lt;h3 id=&#34;stuck-pbis&#34;&gt;
    &lt;a href=&#34;#stuck-pbis&#34;&gt;#&lt;/a&gt;
    Stuck PBIs
&lt;/h3&gt;&lt;p&gt;In scrum, we are supposed to be delivering value fast. It doesn&amp;rsquo;t make sense to have a bunch of PBIs stuck at the &amp;ldquo;Review&amp;rdquo; swimlane for 3 days and picking up new work instead of reviewing the open PRs. The daily scrum is the time and place to make these decisions if they are not made during the day.&lt;/p&gt;
&lt;p&gt;Bottlenecks in the sprint board can be an indication of poor daily scrums. Of course, the root cause may be different here, but when we see jammed swimlanes we ought to think of the daily scrum too.&lt;/p&gt;
&lt;h3 id=&#34;my-pbi&#34;&gt;
    &lt;a href=&#34;#my-pbi&#34;&gt;#&lt;/a&gt;
    My PBI
&lt;/h3&gt;&lt;p&gt;Often you may hear people use phrases like &amp;ldquo;Yesterday, I finished the implementation in my PBI&amp;rdquo;. This is a highly problematic situation, as this single phrase implies that the team members are not thinking of the sprint&amp;rsquo;s work in a collective way. They work in an isolated way and this can impede their understanding of success.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Completing &amp;ldquo;my&amp;rdquo; PBI while my teammate struggles doesn&amp;rsquo;t make the sprint a success&lt;/em&gt;. This doesn&amp;rsquo;t mean that the team members are selfish. All I am trying to say is that software engineering is a team sport and it takes effort to deeply understand this and change your day-to-day work habits accordingly.&lt;/p&gt;
&lt;h2 id=&#34;another-way&#34;&gt;
    &lt;a href=&#34;#another-way&#34;&gt;#&lt;/a&gt;
    Another way
&lt;/h2&gt;&lt;p&gt;The typical format most teams that I know of use is the &amp;ldquo;What did I do yesterday? What will I do today? Do I have any impediments?&amp;rdquo;. I usually call this the &amp;ldquo;per-person&amp;rdquo; format. However, remember that the format is up to the team to decide. Consulting the scrum guide we find the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Developers can select whatever structure and techniques they want, as long as their Daily Scrum focuses on progress toward the Sprint Goal and produces an actionable plan for the next day of work.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;overview&#34;&gt;
    &lt;a href=&#34;#overview&#34;&gt;#&lt;/a&gt;
    Overview
&lt;/h3&gt;&lt;p&gt;An alternative to the &amp;ldquo;per-person&amp;rdquo; format would be the &amp;ldquo;per-PBI&amp;rdquo; format. With this approach, the team works the sprint board right to left and top to bottom. Every open PBI is discussed and the focus is on what the team needs to do in the next 24 hours to move this PBI towards the right (&amp;ldquo;Done&amp;rdquo; swimlane).&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s use an example to understand it better. Assuming that the team&amp;rsquo;s sprint backlog is the following:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;//localhost:1313/img/posts/sprint_board.png&#34;
    alt=&#34;Figure 1.1: Sprint board&#34;&gt;
&lt;/figure&gt;

&lt;p&gt;The daily scrum would first focus on the topmost PBI in the &amp;ldquo;Delivered&amp;rdquo; swimlane. They would ask if it can be considered done. If yes, it would be moved to the &amp;ldquo;Done&amp;rdquo; swimlane. If not, a team member could undertake to check if it works as expected and move it to &amp;ldquo;Done&amp;rdquo;. Then they would do the same for the second &amp;ldquo;Delivered&amp;rdquo; PBI if there was any and so on and so forth.&lt;/p&gt;
&lt;p&gt;They would then move to the &amp;ldquo;Merged&amp;rdquo; swimlane, focusing on how could they get these tickets to &amp;ldquo;Delivered&amp;rdquo;. Would they deploy on production? If yes, who would undertake it? Are there any dependencies that need to be deployed as well? Who should be notified? These are the things that &lt;em&gt;should&lt;/em&gt; be discussed during a healthy daily scrum.&lt;/p&gt;
&lt;p&gt;The next step would be the &amp;ldquo;Review&amp;rdquo; swimlane, in which the team needs to ensure that the PBIs do not remain idle for review if there is the capacity from team members to review them. They could decide who gets to review what and share more context if needed. Priorities could be defined if time and/or capacity do not suffice for all the PBIs. Again, the focus would be on how to move these PBI to &amp;ldquo;Merged&amp;rdquo; within the next 24 hours.&lt;/p&gt;
&lt;p&gt;Then, they would briefly discuss the &amp;ldquo;In Progress&amp;rdquo; PBIs, sharing progress and impediments and making clarifications if needed. The last step would be to talk about starting new PBIs in the next 24 hours.&lt;/p&gt;
&lt;p&gt;Finally, there can be some time to share anything that needs to be shared and wasn&amp;rsquo;t already covered.&lt;/p&gt;
&lt;h3 id=&#34;advantages&#34;&gt;
    &lt;a href=&#34;#advantages&#34;&gt;#&lt;/a&gt;
    Advantages
&lt;/h3&gt;&lt;h4 id=&#34;reduced-lead-time&#34;&gt;
    &lt;a href=&#34;#reduced-lead-time&#34;&gt;#&lt;/a&gt;
    Reduced lead time
&lt;/h4&gt;&lt;p&gt;This format focuses on getting things done and delivering value. It&amp;rsquo;s all about what needs to be done within the next 24 hours to move this PBI to the next swimlane. Inevitably, this prioritizes closing the open PBIs over opening new ones. As we have already discussed in the &lt;a class=&#34;link&#34; href=&#34;https://nvoulgaris.com/limiting-work-in-progress-in-scrum&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;em&gt;Limiting work in progress&lt;/em&gt;&lt;/a&gt; post, this reduces the team&amp;rsquo;s lead time.&lt;/p&gt;
&lt;h4 id=&#34;focus-shifts-to-planning&#34;&gt;
    &lt;a href=&#34;#focus-shifts-to-planning&#34;&gt;#&lt;/a&gt;
    Focus shifts to planning
&lt;/h4&gt;&lt;p&gt;Instead of discouraging interruptions while other team members are sharing their input, this format welcomes their contribution. Fostering dialogue in this way shifts the focus from reporting to planning. Team members communicate more and it&amp;rsquo;s all about moving the ticket to the right, instead of plainly sharing yesterday&amp;rsquo;s actions.&lt;/p&gt;
&lt;h4 id=&#34;teamwork-mentality&#34;&gt;
    &lt;a href=&#34;#teamwork-mentality&#34;&gt;#&lt;/a&gt;
    Teamwork mentality
&lt;/h4&gt;&lt;p&gt;Furthermore, the transition from monologue to an intensely collaborative format builds stronger team relationships and a teamwork mentality. The team learns to function as a unit, as opposed to a set of individuals. They learn to cooperate and they understand that great results take more than an individual writing code. There is no &amp;ldquo;my PBI&amp;rdquo; anymore. There is &amp;ldquo;our work&amp;rdquo;.&lt;/p&gt;
&lt;h3 id=&#34;considerations&#34;&gt;
    &lt;a href=&#34;#considerations&#34;&gt;#&lt;/a&gt;
    Considerations
&lt;/h3&gt;&lt;h4 id=&#34;longer-daily-scrums&#34;&gt;
    &lt;a href=&#34;#longer-daily-scrums&#34;&gt;#&lt;/a&gt;
    Longer daily scrums
&lt;/h4&gt;&lt;p&gt;From my personal experience, I&amp;rsquo;ve noticed that the session sometimes tends to last longer with this format. This is a result of the increased dialogue. However, there can be a number of root causes behind this.&lt;/p&gt;
&lt;p&gt;The first thing that should come into our minds is whether there are too many open PBIs. If yes, the team should focus on closing some of them before starting to work on new ones. It could also show that the team is getting dragged into long conversations, which could be kept shorter. Finally, maybe the team &lt;em&gt;needs&lt;/em&gt; this extra time. Personally, I wouldn&amp;rsquo;t mind a slightly longer daily scrum so long as the conversation is fruitful and meaningful.&lt;/p&gt;
&lt;h4 id=&#34;people-feel-left-out&#34;&gt;
    &lt;a href=&#34;#people-feel-left-out&#34;&gt;#&lt;/a&gt;
    People feel left out
&lt;/h4&gt;&lt;p&gt;Also, people whose work is not directly visible on the board (e.g. designers and product owners) could start to feel left out with this format. My advice would be to encourage them to contribute whenever needed in the conversation and to use the time at the end of the session to share their input if it wasn&amp;rsquo;t already shared.&lt;/p&gt;
&lt;h2 id=&#34;own-the-process&#34;&gt;
    &lt;a href=&#34;#own-the-process&#34;&gt;#&lt;/a&gt;
    Own the process
&lt;/h2&gt;&lt;p&gt;Having shared this technique, which I have successfully used, it is important to understand that &lt;strong&gt;every team is different&lt;/strong&gt;. Just because it worked for a team it doesn&amp;rsquo;t mean that it will also work for another one. Dogmatically applying a solution that worked for another team and expecting results goes against the very nature of the agile mindset.&lt;/p&gt;
&lt;p&gt;I would not advise against applying this format, but rather use it as a starting point. Call it an experiment and remember to evaluate this experiment. Then tweak it and run another experiment. Evaluate this one too. Then tweak it again. Chances are that the result that works for your team is different than the one I described. Maybe slightly different, maybe radically different. The point is to understand that the &lt;strong&gt;process is here to serve us&lt;/strong&gt; and not the other way around. If it is not working, then change it to something that works. Make it your own.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;
    &lt;a href=&#34;#conclusion&#34;&gt;#&lt;/a&gt;
    Conclusion
&lt;/h2&gt;&lt;p&gt;The daily scrum is a pivotal event that can make all the difference between a successful and a failed sprint. Often, it gets executed in a formalistic way, which offers no real value. There are a number of symptoms that can help us identify a dysfunctional daily scrum session, such as lack of planning for the next 24 hours, jammed swimlanes and people not engaging in conversation during the session.&lt;/p&gt;
&lt;p&gt;A different way to run the session can prove beneficial. I have successfully used what I call the &amp;ldquo;per-PBI&amp;rdquo; format to run daily scrums and I feel that it offers a series of advantages, such as reduced lead time and improved team cohesion. Along with it come some downsides, such as certain roles feeling left out and increased duration of the session.&lt;/p&gt;
&lt;p&gt;No matter if we choose the &amp;ldquo;per-PBI&amp;rdquo; format or not, the responsibility of identifying the dysfunction and taking action to improve the situation lies with us, the software engineering team. So, I would strongly advise experimenting with different formats and tweaking the process until it serves the team.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Agile theater</title>
        <link>//localhost:1313/agile-theater/</link>
        <pubDate>Sun, 08 Nov 2020 00:00:00 +0000</pubDate>
        
        <guid>//localhost:1313/agile-theater/</guid>
        <description>&lt;img src="//localhost:1313/img/posts/agile_theater.jpg" alt="Featured image of post Agile theater" /&gt;&lt;p&gt;Almost 20 years past the authorship and signature of the Agile manifesto and its true message has gone astray. The residual believers of the original ideas of the Agile manifesto have found shelter in the Software Craftsmanship movement, but nowadays the roots of the problem lie far deeper than the lost ideas and the wasted potential to do things better.&lt;/p&gt;
&lt;p&gt;The misinterpretation of the philosophy of the agile manifesto combined with the creation of a number of frameworks, certifications and job titles has resulted in a chaotic situation. A situation which not only faces the exact same problems that led to the creation of the Agile manifesto in the first place, but which results in increased complexity and work. This is a direct consequence of people following dogmatically some obscure guidelines which they do not understand in the first place.&lt;/p&gt;
&lt;p&gt;If you are part of an agile organization, have you ever taken a step back to create distance between yourself and your work and reflected on how you do things in your organization? Is the Agile approach better than what you had before? If yes, why is it so? What adds &lt;em&gt;true value&lt;/em&gt;? What has improved and in what way?&lt;/p&gt;
&lt;p&gt;These questions should be easy to answer, especially by anyone who is part of an organization that has spent enormous amounts of effort and money in a so-called, agile transformation, and yet, they prove astonishingly difficult. In this blog post, I will try to put in words what &lt;em&gt;I believe&lt;/em&gt; the true Agile mindset is.&lt;/p&gt;
&lt;h2 id=&#34;the-problem&#34;&gt;
    &lt;a href=&#34;#the-problem&#34;&gt;#&lt;/a&gt;
    The problem
&lt;/h2&gt;&lt;p&gt;Before attempting to provide a solution, one has to really understand the problem. So, let&amp;rsquo;s try to delve into it. Let&amp;rsquo;s study the following, hypothetical case.&lt;/p&gt;
&lt;p&gt;A company decides to become Agile and use Scrum. An Agile coach is hired and the so-called Agile transformation begins. The offices are rearranged, new shiny boards are installed and Scrum Master and Product Owner roles are born and filled. Every two weeks a new sprint begins. Its goal is a chunk of the promised-to-the-client release in a few months time. People stand up for no more than 15 minutes a day, discussing their progress and coordinating. The walls are full of sticky notes describing tasks. The software engineers still write code in the exact same way they did before, but now in 2-week iterations. No other department has changed the way it works, apart from the engineering department.&lt;/p&gt;
&lt;p&gt;Now, I repeat that this is a hypothetical scenario, but to the extent of my knowledge, a very realistic and typical one. This &lt;em&gt;&amp;ldquo;transformation&amp;rdquo;&lt;/em&gt; is doomed to fail. It is precisely this kind of &lt;em&gt;&amp;ldquo;transformations&amp;rdquo;&lt;/em&gt; that have caused a lot of people to lose faith in the Agile way of working. This approach is fundamentally flawed. It completely misses the essence. It defeats the purpose. Situations like these are commonly described by the term &lt;em&gt;Agile theater&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s examine what&amp;rsquo;s wrong with this approach. The core idea of the Agile mindset is that&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;the people who need the software (stakeholders/users) collaborate closely with the people who make the software and they are able to adjust the course as often as needed&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We will discuss how this may be achieved later on, but first, let&amp;rsquo;s understand why the above-mentioned changes do not serve this goal.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Releases are planned and promised to the customer with certain deadlines. This does not allow for &lt;em&gt;adjusting the course&lt;/em&gt;. Despite the pseudo-iterations, the work is treated in a &lt;em&gt;waterfall&lt;/em&gt; manner. The software engineers break the release work down to 2-week chunks, but that &lt;em&gt;offers nothing&lt;/em&gt; without the rest of the stakeholders and the customer actively participating in that 2-week loop. &lt;em&gt;The course cannot be adjusted&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The software engineers have &lt;em&gt;changed nothing&lt;/em&gt; in the way they write code. Even if the stakeholders and the customer were actively engaged in the loop and even if the course &lt;em&gt;was&lt;/em&gt; adjusted every two weeks or so, how could the software engineers respond to that? &lt;em&gt;They couldn&amp;rsquo;t&lt;/em&gt;. If you were to take just one thing away from this post, let it be the following: &lt;strong&gt;Changing the process means nothing without changing the way code is written&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Everything &lt;em&gt;seems&lt;/em&gt; Agile from the outside, but nothing is really changed. Hence the term &lt;em&gt;Agile theater&lt;/em&gt;. There are neither hooks in the process nor the technical foundation required for constant inspection and adaption. Feedback is not flowing between the software engineers and the stakeholders/users.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;feedback-loops&#34;&gt;
    &lt;a href=&#34;#feedback-loops&#34;&gt;#&lt;/a&gt;
    Feedback loops
&lt;/h2&gt;&lt;p&gt;A truly agile way of working requires constant adaptations. Constant adaptations require a constant flow of feedback. Therefore, lots of feedback loops are needed. The shorter these loops are, the more adaptation they will allow for. The sooner one receives feedback on one&amp;rsquo;s action, the easier it is to amend mistakes.&lt;/p&gt;
&lt;p&gt;A feedback loop may sound like a subtle concept, but if you think about it&amp;rsquo;s &lt;em&gt;powerful&lt;/em&gt; and it&amp;rsquo;s everywhere:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Scrum events are feedback loops. During the daily scrum, the team adapts the upcoming day&amp;rsquo;s work based on the feedback on yesterday&amp;rsquo;s work. During the sprint retrospective, the team generates feedback on the previous sprint and makes amendments for the upcoming sprint. During the sprint review, the stakeholders provide feedback on the delivered increment and the product backlog gets adjusted based on it (&lt;em&gt;sprint review is so misunderstood that perhaps deserves a blog post of its own&lt;/em&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Test-Driven Development (TDD) is a feedback loop. A very short one actually (when done right). The engineers set up a loop between themselves and the code. A change in the code produces immediate feedback. Did the change work? Did it break anything? Does the code written in the last few seconds need modifications? &lt;em&gt;This actually constitutes the fastest feedback software engineers will ever get on their code.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pair programming is a feedback loop. This loop is set up between the two engineers working together. The code one writes produces feedback from the other, which changes the code, which changes the feedback and so on and so forth.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code reviews are a feedback loop. Actually, it is the exact same loop with pair programming, except that it involves more people and the feedback flows &lt;em&gt;significantly slower&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;enabling-inspection-and-adaptation&#34;&gt;
    &lt;a href=&#34;#enabling-inspection-and-adaptation&#34;&gt;#&lt;/a&gt;
    Enabling inspection and adaptation
&lt;/h2&gt;&lt;p&gt;Feedback loops are &lt;em&gt;enablers&lt;/em&gt;. Remember, we need to adjust our course as often as needed based on feedback. How can we adapt the product to feedback if we don&amp;rsquo;t get any from the stakeholders?&lt;/p&gt;
&lt;p&gt;Suppose we do get feedback on a regular basis. How can we utilize it if our technical practices do not support changing easily? The XP technical practices (TDD, pair programming, refactoring etc) enable software engineers to work in a way that expects frequent changes and - as discussed - they constitute feedback loops.&lt;/p&gt;
&lt;p&gt;For our feedback loops to be valuable, not only do they need to be in place, but we need to make sure that they are short as well. Getting feedback after a 6-month release, in order to plan the next one, technically is a feedback loop. Not one that can be useful in Agile environments though. Six months is an aeon on a typical market and it is almost impossible to meaningfully predict the needs imposed by the market in such a long period. The release features are doomed to become obsolete to some extent.&lt;/p&gt;
&lt;p&gt;A unit test suite that needs 15 minutes to run is technically a feedback loop, but again, not a useful one. There is no way an engineer can perform TDD using this test suit. The TDD cycle is going to be way too slow to be useful.&lt;/p&gt;
&lt;p&gt;To work in an Agile way we need to strive to &lt;em&gt;keep our feedback loops as short as possible&lt;/em&gt;. We need to shrink them, so long as we keep them meaningful. The shorter the loop the quicker the feedback and therefore the adaptation.&lt;/p&gt;
&lt;h2 id=&#34;scaffolding&#34;&gt;
    &lt;a href=&#34;#scaffolding&#34;&gt;#&lt;/a&gt;
    Scaffolding
&lt;/h2&gt;&lt;p&gt;Now let&amp;rsquo;s assume that we could do all these things. We could flip a magic switch and, starting from tomorrow, we could create more feedback loops, shorten them, use their feedback to adapt, embrace all XP technical practices etc.&lt;/p&gt;
&lt;p&gt;Why would it make sense to use an Agile framework then? Changes create discomfort. It&amp;rsquo;s natural. Especially when they are radical and they concern the way we work every day. What would Scrum, Kanban, SAFe, LeSS, you-name-it provide that would justify this tremendous effort and energy needed to adopt them? Take a minute to reflect before proceeding.&lt;/p&gt;
&lt;p&gt;My answer would be a resounding &lt;em&gt;&amp;ldquo;nothing&amp;rdquo;&lt;/em&gt;. If we already enjoy all the merits that these frameworks bring, why bother adopting them?&lt;/p&gt;
&lt;p&gt;However, this magic switch does not exist. That&amp;rsquo;s were the frameworks come into play. They can be used to &lt;em&gt;initiate&lt;/em&gt; the transition and help us create all these good habits. They can provide the time and place for feedback loops to be created and their feedback to be used. They would put us on the right track and &lt;em&gt;help us identify what works best for us&lt;/em&gt;. They can be our guide to the exploration of the shift to the Agile mindset. They are great as long as they are used as &lt;em&gt;scaffolding&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Getting passed the scaffolding stage &lt;em&gt;they should be gradually thrown away, giving way to our own, unique Agile process as it emerges&lt;/em&gt;. The process that works best for us.&lt;/p&gt;
&lt;p&gt;Failing to throw them away and adjust the process in a way that suits our needs and work defeats the purpose. Frameworks are there to put us on the right track and not be blindly followed to the letter, in a ritualistic way. &lt;em&gt;Applying them dogmatically only implies a cargo cult mentality&lt;/em&gt;. Doing things without understanding why and expecting certain results to just happen is precisely the definition of &lt;em&gt;cargo cult&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The Agile mindset is centered around autonomous teams, working in a self-organized manner. What are the chances that two autonomous, self-organized teams will need and use the exact same process to the letter?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If a process is the same for everyone, it is not Agile&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Dogmatically following a framework (e.g. Scrum) to the letter results in everyone doing exactly the same.&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t get me wrong. The process that works best for you may be ridiculously close to Scrum (or Kanban etc). I only suggest that these frameworks need not be followed blindly to the letter.&lt;/p&gt;
&lt;h2 id=&#34;never-stop-learning&#34;&gt;
    &lt;a href=&#34;#never-stop-learning&#34;&gt;#&lt;/a&gt;
    Never stop learning
&lt;/h2&gt;&lt;p&gt;Being a Scrum Master myself, I&amp;rsquo;ve fallen prey to the frameworks too. During my early days getting passed the Scrum Master training, if the daily stand-up was reaching the 16th minute, I thought that my whole professional world was falling apart. I felt obliged to make the team see that is &lt;em&gt;should&lt;/em&gt; have been stopped earlier, even if the team wrapped up and finished the stand-up in a total of 16-17 minutes. It still felt wrong. I was myself a victim of the above-mentioned cargo cult mentality.&lt;/p&gt;
&lt;p&gt;However, thinking back, I find it quite reasonable. It&amp;rsquo;s a natural step in the learning process. To master something one has to first understand it perfectly and know it inside out. One has to apply it and practise it a lot until one is able to decipher its true meaning and master the skill.&lt;/p&gt;
&lt;p&gt;Working with a team will not make you a Scrum Master / Product Owner / Agile Software engineer. A certification will &lt;strong&gt;definitely not&lt;/strong&gt; make you one (and I own a certification too). Instead, go out in the industry and work with teams. Listen closely and try to help them. Take time to reflect and identify what works. Above all, never stop learning and be open to changing your mind or standpoint.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;
    &lt;a href=&#34;#conclusion&#34;&gt;#&lt;/a&gt;
    Conclusion
&lt;/h2&gt;&lt;p&gt;Almost 20 years ago a few people got together and tried to uncover better ways to make software. The message got lost in the way. The intention became misunderstood. The end result is a cargo cult mentality that follows rules blindly, creating more problems than it solves. Job titles and certifications are born, but these don&amp;rsquo;t change the way software is being written.&lt;/p&gt;
&lt;p&gt;Agility is based on the idea of constant adaptation based on feedback. Feedback from the stakeholders, the users, the market, the code and our fellow software engineers. The way to get this is to establish feedback loops and make sure that they are short enough to have meaning and be helpful. These will enable constant inspection and adaptation.&lt;/p&gt;
&lt;p&gt;Agile frameworks are out there to put people on the right track and not to be followed religiously. They are tools and should be used to help us uncover &lt;em&gt;our&lt;/em&gt; better ways of making software. As time goes by they should naturally give way to the process that works best for us. A continuous learning mentality will support this gradual transition.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Limiting work in progress in scrum</title>
        <link>//localhost:1313/limiting-work-in-progress-in-scrum/</link>
        <pubDate>Sun, 17 May 2020 00:00:00 +0000</pubDate>
        
        <guid>//localhost:1313/limiting-work-in-progress-in-scrum/</guid>
        <description>&lt;img src="//localhost:1313/img/posts/wip_limits.jpg" alt="Featured image of post Limiting work in progress in scrum" /&gt;&lt;p&gt;How would you identify bottlenecks in your team&amp;rsquo;s process? How would you surface them? How would you encourage the team to increase collaboration? How would you decrease lead times and increase the bus factor?&lt;/p&gt;
&lt;p&gt;Working in an &lt;em&gt;Agile&lt;/em&gt; way is far from following a predefined set of rules. On the contrary, is all about &lt;em&gt;inspecting and adapting&lt;/em&gt;. It&amp;rsquo;s about finding what works best for the team and it is an &lt;em&gt;ever-ending&lt;/em&gt; process. This includes a lot of &lt;em&gt;experimentation&lt;/em&gt;. Adopting something new for a few days/weeks, evaluating its benefits and either keep it or discard it before you move on to the next experiment. A team not chasing continuous improvement cannot be &lt;em&gt;Agile&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This post is all about experimenting with limiting work-in-progress (WIP). Applying WIP limits is a beautiful technique, originated in Kanban, but I believe it can be applied very effectively on &lt;em&gt;Scrum&lt;/em&gt; teams too. Before we analyze the technique though, let&amp;rsquo;s briefly go over the symptoms that may push a team towards experimenting with WIP limits in the first place.&lt;/p&gt;
&lt;h2 id=&#34;symptoms&#34;&gt;
    &lt;a href=&#34;#symptoms&#34;&gt;#&lt;/a&gt;
    Symptoms
&lt;/h2&gt;&lt;p&gt;Let&amp;rsquo;s imagine a &lt;em&gt;Scrum&lt;/em&gt; team consisting of five software engineers is in the middle of a two-week sprint. The first five stories &lt;em&gt;in-progress&lt;/em&gt; and the team is juggling among them, trying to advance all of them at the same time.&lt;/p&gt;
&lt;p&gt;There is a number of issues that one could note in the above-mentioned situation. I would argue that the first one is the &lt;strong&gt;lack of focus&lt;/strong&gt;. Focus is one of the five &lt;em&gt;Scrum&lt;/em&gt; values. It is a quality that without it, &lt;em&gt;Scrum&lt;/em&gt; can never work. It is as simple as that. Although the team is focused on a macro-level (there is a two-week sprint with a well-defined sprint goal), the lack of focus on a micro-level is resounding.&lt;/p&gt;
&lt;p&gt;Secondly, there is a &lt;strong&gt;total absence of priority&lt;/strong&gt;. The stories in a sprint board are sorted based on their priority. The higher the priority of the story, the higher on the board the story is. Trying to put this priority in words, it would be something in the following lines: &lt;em&gt;&amp;ldquo;if as a team we manage to get a single story done in the sprint, let this be the topmost one. If we get two stories done, let them be the first two ones&amp;rdquo;&lt;/em&gt; and so on and so forth. A team that is working on five stories in parallel does not honour the notion of priority and to some extent, it is missing part of the essence of &lt;em&gt;Scrum&lt;/em&gt; as a framework.&lt;/p&gt;
&lt;p&gt;Furthermore, a team in such a situation exhibits &lt;strong&gt;chemistry issues&lt;/strong&gt;. Perhaps people do not enjoy working with each other or they believe that it is not efficient. Whatever the reason, there is no teamwork (e.g. pair programming) and the team is behaving like a set of individuals instead. However, great results are more often than not delivered by great &lt;em&gt;teams&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Such a workflow has the tendency to lead to a &lt;strong&gt;big bang release&lt;/strong&gt; towards the end of the sprint. This allows for no time to react to a release that caused issues and it does not give a smooth, steady flow of value to the stakeholders and the users. A failed release could cause the sprint to fail.&lt;/p&gt;
&lt;p&gt;Lastly, this way of working inevitably leads to significantly &lt;strong&gt;small &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Bus_factor&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;bus factors&lt;/a&gt;&lt;/strong&gt;, usually to a bus factor of one or two. This impedes collective code ownership and in case an individual leaves the team, a knowledge gap is also created.&lt;/p&gt;
&lt;p&gt;I could continue commenting on this situation, but I believe that I have made my point. So, (hopefully) agreeing that this is a problematic situation, let&amp;rsquo;s go over a technique that can mitigate it.&lt;/p&gt;
&lt;h2 id=&#34;what-is-a-wip-limit&#34;&gt;
    &lt;a href=&#34;#what-is-a-wip-limit&#34;&gt;#&lt;/a&gt;
    What is a WIP limit
&lt;/h2&gt;&lt;p&gt;Limiting work-in-progress is a very simple technique.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A WIP limit is a number indicating the maximum items (e.g. stories, tasks) tha may be in-progress at any given moment.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, if a team has a WIP limit of two stories, it can only work on two stories at the same time at any given moment. In order to start working on a third one, one of the two previously &lt;em&gt;in-progress&lt;/em&gt; has to be &lt;em&gt;done&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;It originates from Kanban and there it applies to tasks on the team&amp;rsquo;s Kanban board. In &lt;em&gt;Scrum&lt;/em&gt;, it can either be applied to stories or story tasks, depending on what works best for the team. Also, the very definition of &lt;em&gt;in-progress&lt;/em&gt; may be adjusted according to the team&amp;rsquo;s needs. For instance, a story can be considered &lt;em&gt;in-progress&lt;/em&gt; until it is code-reviewed or until it is deployed to production. The limits may span on a number of different swimlanes as well and each swimlane can have its own limit.&lt;/p&gt;
&lt;h3 id=&#34;can-this-be-applied-to-scrum&#34;&gt;
    &lt;a href=&#34;#can-this-be-applied-to-scrum&#34;&gt;#&lt;/a&gt;
    Can this be applied to scrum?
&lt;/h3&gt;&lt;p&gt;It would be reasonable to wonder whether there would be any sense in applying such a technique to &lt;em&gt;Scrum&lt;/em&gt;, given that the work is bound by the sprint duration. One could argue that WIP limits in Kanban make sense because there is no such boundary.&lt;/p&gt;
&lt;p&gt;However, considering all the above-mentioned symptoms, which could be more or less addressed by applying a WIP limit, I feel that it is meaningful. As a matter of fact, we have applied it in teams that I have been a part of with considerable success.&lt;/p&gt;
&lt;p&gt;In case applying a Kanban technique to &lt;em&gt;Scrum&lt;/em&gt; feels like breaking the rules, let&amp;rsquo;s always keep in mind that being &lt;em&gt;Agile&lt;/em&gt; is all about the &lt;strong&gt;culture&lt;/strong&gt;. Blindly adopting a set of rules is a cargo cult mentality that leads nowhere. If you ask me, if WIP limits serve us, let&amp;rsquo;s use them.&lt;/p&gt;
&lt;h2 id=&#34;wip-limit-benefits&#34;&gt;
    &lt;a href=&#34;#wip-limit-benefits&#34;&gt;#&lt;/a&gt;
    WIP limit benefits
&lt;/h2&gt;&lt;p&gt;Let&amp;rsquo;s examine some of the benefits that a team would expect by applying WIP limits.&lt;/p&gt;
&lt;h3 id=&#34;reduced-lead-time&#34;&gt;
    &lt;a href=&#34;#reduced-lead-time&#34;&gt;#&lt;/a&gt;
    Reduced lead time
&lt;/h3&gt;&lt;p&gt;&lt;em&gt;Lead time&lt;/em&gt; is a metric, expressing the time elapsed between starting and completing an item of work.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A &lt;em&gt;Scrum&lt;/em&gt; team&amp;rsquo;s lead time is the time required between the team committing to a story (sprint planning) and the story being &lt;em&gt;done&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s study again the hypothetical example of the &lt;em&gt;Scrum&lt;/em&gt; team of five software engineers in the middle of the sprint with five stories in-progress. Let&amp;rsquo;s also assume that the team manages to complete all five stories at the very last day of the sprint and that these were all the stories in this sprint. What is the lead time of the team?&lt;/p&gt;
&lt;p&gt;Each of the five stories took nine days (the working days of a two-week sprint excluding the &lt;em&gt;Scrum&lt;/em&gt; events day) to complete, so the team&amp;rsquo;s average lead time is&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(5 * 9) / 5 = 9 days&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s assume that the team had applied a WIP limit of two. This means that no more than two stories could be worked on parallel. The first two stories could perhaps be &lt;em&gt;done&lt;/em&gt; in the third and fourth day respectively. The next two stories could be completed in the seventh and eight days respectively and the last story could be completed on the very last day of the sprint. Let&amp;rsquo;s calculate again the team&amp;rsquo;s average lead time.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(3 + 4 + 7 + 8 + 9) 5 = 5.4 days&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;These numbers are fictitious of course, but they are meant to illustrate the point. As a matter of fact, feel free to fiddle with the numbers and inspect the results. The result will always be less than nine. I feel that plugging some reasonable numbers in the formula will result in an average lead time &lt;em&gt;significantly below&lt;/em&gt; 9, like 5.4.&lt;/p&gt;
&lt;p&gt;This essentially means that the team delivered value early. The stakeholders and product users started having increments on the third and fourth day of the sprint instead of the ninth.&lt;/p&gt;
&lt;h3 id=&#34;teamwork&#34;&gt;
    &lt;a href=&#34;#teamwork&#34;&gt;#&lt;/a&gt;
    Teamwork
&lt;/h3&gt;&lt;p&gt;A WIP limit is essentially the application of a restriction. A restriction on the amount of work that can be concurrently undertaken. However, team members remain the same despite the restriction. Hence, the smaller the number of stories or tasks that can be simultaneously &lt;em&gt;in-progress&lt;/em&gt; the more the level of cooperation among the team members has to increase.&lt;/p&gt;
&lt;p&gt;Think about it. In a very simplistic scenario, a team of two software engineers with a WIP limit of one would always pair (in the case where the WIP limit is applied to tasks) or - at least - work on the same story (in the case where the WIP limit is applied to stories). A team of - say - 5 software engineers with a WIP limit of four would mean that there should always be at least one pair. Reduce this to a WIP limit of three and the pairs become at 2 at all given moments.&lt;/p&gt;
&lt;p&gt;Pairing is a more intense form of collaboration, but working on the same story is still more collaborative than two software engineers working on different stories. Given sufficient time, this restriction will strengthen the team bonds and will help build the right chemistry.&lt;/p&gt;
&lt;h3 id=&#34;bus-factor&#34;&gt;
    &lt;a href=&#34;#bus-factor&#34;&gt;#&lt;/a&gt;
    Bus factor
&lt;/h3&gt;&lt;p&gt;Increased teamwork goes hand in hand with increased bus factors. I believe this is quite straightforward. The more often two or more people work on the same story, the more the parts of the code that more people will be familiar with. On the contrary, a team whose members tend to work alone on a story will end up with a codebase full of parts that only a single software engineer is familiar with.&lt;/p&gt;
&lt;h3 id=&#34;identify-bottlenecks&#34;&gt;
    &lt;a href=&#34;#identify-bottlenecks&#34;&gt;#&lt;/a&gt;
    Identify bottlenecks
&lt;/h3&gt;&lt;p&gt;Applying a WIP limit is a tailor-made technique for surfacing bottlenecks in a team&amp;rsquo;s process. Let&amp;rsquo;s imagine a scenario in which a team uses the flow &lt;em&gt;&amp;ldquo;todo&amp;rdquo;&lt;/em&gt;, &lt;em&gt;&amp;ldquo;doing&amp;rdquo;&lt;/em&gt;, &lt;em&gt;&amp;ldquo;review&amp;rdquo;&lt;/em&gt;, &lt;em&gt;&amp;ldquo;delivered&amp;rdquo;&lt;/em&gt; and then &lt;em&gt;&amp;ldquo;done&amp;rdquo;&lt;/em&gt;. It undertakes stories and when the code is written, the story is passed to the rest of the team for code review. The engineer(s) that worked on this story naturally grab the next one until this one gets reviewed. It is quite common for teams to end up with a pile of stories that should get reviewed towards the end of the sprint. This, of course, leads to rushed code reviews and a big bang release with a dozen features in it. This is a typical case of a &lt;em&gt;bottleneck in the process&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Now, let&amp;rsquo;s imagine that this team applies some WIP limits. Remember that these may span from one to several swimlanes. Let&amp;rsquo;s assume that the &lt;em&gt;&amp;ldquo;review&amp;rdquo;&lt;/em&gt; swimlane has a dedicated limit of three stories. When the third story gets in the lane the team should prioritize code reviewing these stories. Otherwise, no new stories can be propagated from &lt;em&gt;&amp;ldquo;doing&amp;rdquo;&lt;/em&gt; to &lt;em&gt;&amp;ldquo;review&amp;rdquo;&lt;/em&gt;. These stories will be reviewed and if the &lt;em&gt;&amp;ldquo;delivered&amp;rdquo;&lt;/em&gt; column has a respective limit, they will also get deployed to production and eventually reach &lt;em&gt;&amp;ldquo;done&amp;rdquo;&lt;/em&gt;, allowing space for more stories to be worked.&lt;/p&gt;
&lt;p&gt;The application of the limit has not only made the problem apparent, but it has also provided a solution to it.&lt;/p&gt;
&lt;h2 id=&#34;fine-tuning-the-limits&#34;&gt;
    &lt;a href=&#34;#fine-tuning-the-limits&#34;&gt;#&lt;/a&gt;
    Fine-tuning the limits
&lt;/h2&gt;&lt;p&gt;Assuming that some symptoms are visible and the team feels that some WIP limits would be helpful, a natural question would be how can a team go about setting them. What are the right the numbers? How many swimlanes should a limit span?&lt;/p&gt;
&lt;h3 id=&#34;avoid-multitasking&#34;&gt;
    &lt;a href=&#34;#avoid-multitasking&#34;&gt;#&lt;/a&gt;
    Avoid multitasking
&lt;/h3&gt;&lt;p&gt;I would propose that the first thing to avoid is multitasking. A WIP limit greater than the number of software engineers in the team would mean that people are encouraged to multitask. For instance, imagine a team of five software engineers with a WIP limit of 6.&lt;/p&gt;
&lt;p&gt;Keep this in mind. In my opinion, if you are ready to set a WIP limit greater than the number of software engineers in the team, take a step back. Think the problem over again. Why do you want to do this? What do you expect to gain out of it?&lt;/p&gt;
&lt;h3 id=&#34;not-too-high&#34;&gt;
    &lt;a href=&#34;#not-too-high&#34;&gt;#&lt;/a&gt;
    Not too high
&lt;/h3&gt;&lt;p&gt;Building on this point, a WIP limit equal to the number of software engineers in the team would mean that no one can multitask, but on the other hand, pairing and collaboration are not encouraged. This kind of beats the purpose, because fostering collaboration is a key motive for using this technique.&lt;/p&gt;
&lt;p&gt;The two above-mentioned strategies can work but, only as first steps and only in rare situations. For instance, if some team members are very reluctant about using WIP limits and yet the rest of the team feels that they would be beneficial, perhaps it&amp;rsquo;s a decent first step. However, I see very limited benefits besides these cases.&lt;/p&gt;
&lt;h3 id=&#34;but-not-too-low-either&#34;&gt;
    &lt;a href=&#34;#but-not-too-low-either&#34;&gt;#&lt;/a&gt;
    But not too low either
&lt;/h3&gt;&lt;p&gt;On the other hand, a very restrictive WIP limit can have negative effects. Not every task and story is suitable for pairing or requires more than one person working on it. Also, pairing is great, but, as discussed in extensively in my &lt;a class=&#34;link&#34; href=&#34;https://nvoulgaris.com/pair-programming-making-the-whole-greater-than-the-sum-of-its-parts/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;pair programming post&lt;/a&gt;, it can be exhaustive. Setting a WIP limit of two in a team with four software engineers would automatically mean that the engineers should always work in pairs to honour this rule. If this is what you are after - always working in pair - by all means, go for it. However, pay a lot of attention to it. Such a restrictive limit may lead to people feeling that they are suffocating or it may just be counterproductive.&lt;/p&gt;
&lt;h3 id=&#34;inspect-and-adapt&#34;&gt;
    &lt;a href=&#34;#inspect-and-adapt&#34;&gt;#&lt;/a&gt;
    Inspect and adapt
&lt;/h3&gt;&lt;p&gt;Having said all these, we still haven&amp;rsquo;t answered the above-mentioned questions. Well, you might have guessed it. There is no &lt;em&gt;right&lt;/em&gt; answer. &lt;em&gt;There is no silver bullet&lt;/em&gt;. The very philosophy of &lt;em&gt;Agile&lt;/em&gt; suggests a totally different approach to &lt;em&gt;right&lt;/em&gt; answers and &lt;em&gt;silver bullets&lt;/em&gt;. &lt;em&gt;Scrum&lt;/em&gt; says &lt;em&gt;&amp;ldquo;inspect and adapt&amp;rdquo;&lt;/em&gt;. That is what I would suggest.&lt;/p&gt;
&lt;p&gt;Start off with discussing the situation during the retrospective. Come up with the first iteration of a few WIP limits. Give it a go and watch what happens. Adjust it and repeat the process. This is an ever-ending-process. Keep shifting towards what works best for the team and always keep in mind that different things work on different teams.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;
    &lt;a href=&#34;#conclusion&#34;&gt;#&lt;/a&gt;
    Conclusion
&lt;/h2&gt;&lt;p&gt;Being &lt;em&gt;Agile&lt;/em&gt; means being after continuous improvement. This requires being able to read the symptoms and come up with experiments to help the team work better. Lack of focus, disrespect to priority, big bang releases and small bus factors are serious symptoms that should be dealt with.&lt;/p&gt;
&lt;p&gt;Limiting work-in-progress can provide a great boost to the team, like reducing the average lead time, improving collaboration, increasing the bus factor, identifying bottlenecks and more. If a team exhibits these symptoms, applying some WIP limits could be an experiment worth considering.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Running remote retrospectives</title>
        <link>//localhost:1313/running-remote-retrospectives/</link>
        <pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate>
        
        <guid>//localhost:1313/running-remote-retrospectives/</guid>
        <description>&lt;img src="//localhost:1313/img/posts/remote_retrospectives.jpg" alt="Featured image of post Running remote retrospectives" /&gt;&lt;p&gt;Remote work has become an integral part of a number of professions, with software engineering being number one in the list. Working remotely requires a cultural foundation and a shift of mind on our perception. I believe that there is quite a lot of room for improvement on these points.&lt;/p&gt;
&lt;p&gt;So, in this article I will share my thoughts and tips on points I consider important when running a remote retrospective. These come from the point of view of a scrum master. Regardless of whether people call themselves a &amp;ldquo;scrum master&amp;rdquo; or not, running a retrospective means wearing the hat, at least temporarily.&lt;/p&gt;
&lt;p&gt;My intention here is not to cover the fundamentals, such as the &lt;em&gt;goal&lt;/em&gt; and the &lt;em&gt;structure&lt;/em&gt; of the session. These are covered extensively in my &lt;a class=&#34;link&#34; href=&#34;https://nvoulgaris.com/driving-fruitful-retrospectives&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;driving fruitful retrospectives&lt;/a&gt; post. My aim is to complement that post with the special case of a geographically distributed team.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Throughout this post, I will be referring to a fully remote team. Apart from this and the colocated team, there is also a third case, in which some of the team members are working remotely and some in the same location. I will not be covering the latter in this post.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;engagement&#34;&gt;
    &lt;a href=&#34;#engagement&#34;&gt;#&lt;/a&gt;
    Engagement
&lt;/h2&gt;&lt;p&gt;The primary goal of a scrum master remains the same whether the retrospective is taking place remotely or colocated. It is to make sure that &lt;strong&gt;all participants engage in the activity&lt;/strong&gt;. This is a precondition. I cannot imagine a successful session that fails to meet this. When I drive retrospectives, this is the primary reason for which I use the &lt;em&gt;&amp;ldquo;set the stage&amp;rdquo;&lt;/em&gt; step.&lt;/p&gt;
&lt;p&gt;We will discuss a few extra points on this topic further below, on the &lt;em&gt;facilitation&lt;/em&gt; part, but the reason that I am mentioning it here is that being remote imposes a few extra difficulties. So, before even starting the session, I would propose to &lt;em&gt;focus on communication&lt;/em&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Without communication, there is no engagement and without engagement, there is no retrospective.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Therefore I would propose to spend some time both during the preparation of the session and at the beginning of it to make sure that &lt;em&gt;people can be seen, heard and understood&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;use-the-camera&#34;&gt;
    &lt;a href=&#34;#use-the-camera&#34;&gt;#&lt;/a&gt;
    Use the camera
&lt;/h3&gt;&lt;p&gt;Using the camera is a great tip for remotely working teams. I find it particularly important during the retrospective. It feels very different conversing with just a voice than with an individual who is located somewhere else. Context and a great deal of expressivity derives from our body language. A lot of our reactions are expressed via it, using facial expressions or hand gestures, without verbal communication. Take a moment to think of how much volume of information is missed when listening to someone without seeing him.&lt;/p&gt;
&lt;p&gt;These, missing pieces of information can make the difference between a constructive argument and one that leads to a dead end. These can also have a resounding effect on team bonding and chemistry in the long run. Personally, I always encourage geographically distributed teams to use their cameras as much as they can, but when it comes to the retrospective, I &lt;em&gt;insist&lt;/em&gt; that everyone should use it.&lt;/p&gt;
&lt;h3 id=&#34;make-sure-everyone-can-be-seen-and-heard&#34;&gt;
    &lt;a href=&#34;#make-sure-everyone-can-be-seen-and-heard&#34;&gt;#&lt;/a&gt;
    Make sure everyone can be seen and heard
&lt;/h3&gt;&lt;p&gt;Taking the time to make sure that everything is functioning properly before starting the retrospective is very important. &lt;em&gt;Has everybody said something. Is everyone&amp;rsquo;s mic functioning as expected? Can everyone hear everybody else? Can everyone see everybody else?&lt;/em&gt; Ask yourself these questions before starting.&lt;/p&gt;
&lt;p&gt;There is no point in starting a retrospective without resolving all sound and video problems. As a matter of fact, in case there is such a problem, the last thing the team wants is to be interrupted in the middle of an exercise to resolve a technical issue with somebody&amp;rsquo;s mic or camera. The last thing a participant wants is to contribute to the conversation only to find out, after a few seconds, that no one heard him.&lt;/p&gt;
&lt;h2 id=&#34;tools&#34;&gt;
    &lt;a href=&#34;#tools&#34;&gt;#&lt;/a&gt;
    Tools
&lt;/h2&gt;&lt;p&gt;Being remote significantly restricts both the options on tools that can be used and the range of exercises that can be run. However, a wise choice on a collaboration tool and a careful selection of exercises can really boost the results of the session.&lt;/p&gt;
&lt;h3 id=&#34;use-an-online-collaboration-tool&#34;&gt;
    &lt;a href=&#34;#use-an-online-collaboration-tool&#34;&gt;#&lt;/a&gt;
    Use an online collaboration tool
&lt;/h3&gt;&lt;p&gt;Retrospectives are all about interaction. The participants should come up with ideas and add information to the session. In order for the data to be meaningful, they should be gathered, processed and the team should work on them. During a colocated session, the wall or a board is naturally used. During a remote retrospective, I would strongly suggest to use an online collaboration tool. There is no point in suggesting a specific one, as there are loads out there that are free and can get the job done. Just make sure that a group of people can simultaneously work on the same space and that the data are updated in real-time (there is no need to refresh in order to see an update). In my experience, the more playful the tool is, the more the participants enjoy the session, so I would suggest something with a sticky-note-on-the-wall look and feel and lots of colours.&lt;/p&gt;
&lt;p&gt;What I would caution one against is not to use any tool and host a blank session, with the participants just discussing without any common ground to work on.&lt;/p&gt;
&lt;h3 id=&#34;reconsider-the-format&#34;&gt;
    &lt;a href=&#34;#reconsider-the-format&#34;&gt;#&lt;/a&gt;
    Reconsider the format
&lt;/h3&gt;&lt;p&gt;Concerning the format of the session, I feel that there is a lot of room for experimentation. Generally, I like sticking to the 5 steps that I have thoroughly described in my &lt;a class=&#34;link&#34; href=&#34;https://nvoulgaris.com/driving-fruitful-retrospectives&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;driving fruitful retrospectives&lt;/a&gt; post, but there are quite a few factors that should be considered.&lt;/p&gt;
&lt;p&gt;Some exercises are not suitable for a team that is not colocated. For instance, there is no meaning running the &lt;em&gt;park bench&lt;/em&gt; exercise on a remote session. The advantages of such an exercise derive from the mobility within the room, the high energy level and the playful format. I believe that attempting to run a variation of this exercise during a remote session would backfire. So, I would propose picking exercises that suite collaboration from distance.&lt;/p&gt;
&lt;p&gt;Also, perhaps one might notice that an exercise takes considerably more time when performed remotely than when run on the spot. That&amp;rsquo;s reasonable as communication is harder and synchronization might require more time. I would suggest to always keep that in mind and, perhaps, adjust the session&amp;rsquo;s schedule.&lt;/p&gt;
&lt;h2 id=&#34;facilitation&#34;&gt;
    &lt;a href=&#34;#facilitation&#34;&gt;#&lt;/a&gt;
    Facilitation
&lt;/h2&gt;&lt;p&gt;As far as facilitation is concerned most of the things that apply in colocated retrospectives, apply to remote ones too. Therefore, I will not repeat the thoughts that I have expressed in &lt;a class=&#34;link&#34; href=&#34;https://nvoulgaris.com/driving-fruitful-retrospectives&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;driving fruitful retrospectives&lt;/a&gt; (such as how to deal with silent members or members that dominate the conversation), but there are a few points worth discussing.&lt;/p&gt;
&lt;p&gt;These thoughts assume that the facilitator is acting as a scrum master. The case the facilitator wears two hats, the one of the scrum master and the one of the member of the development team is outside of the scope of this blog post.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;I usually wear these two hats and I believe that driving a retrospective is perhaps the most challenging part of this dual role.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;make-yourself-invisible&#34;&gt;
    &lt;a href=&#34;#make-yourself-invisible&#34;&gt;#&lt;/a&gt;
    Make yourself invisible
&lt;/h3&gt;&lt;p&gt;As always, try to make the team forget that you are even there. At all times, keep in mind that the scrum master is needed to help the team work meaningfully during the session. Try to &lt;em&gt;be a servant leader&lt;/em&gt;. When needed, remind the team that you are &lt;em&gt;not the protagonist&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For instance, I sometimes find that team members address me when commenting on sticky notes. This is a mini &lt;em&gt;alarm&lt;/em&gt; for me. Usually, when I am physically present, I point to the rest of the team. This gets the job done and does not interrupt the team member. However, when being remote, I have no option but to interrupt her. It is one of the last things I want to do, but having someone addressing me is a signal I take very seriously. The retrospective is being derailed and I should take action.&lt;/p&gt;
&lt;p&gt;As a second example, when team members are called to come up with input and &amp;ldquo;stick it to the wall&amp;rdquo;, they sometimes look for the facilitator to impose an order or the process. Take extra care to be &amp;ldquo;absent&amp;rdquo; at that point. This is easier to achieve when being remote. Just stay silent and let them &lt;em&gt;self-organize&lt;/em&gt;. They will do it. Remember that silence is gold in this case. If it gets uncomfortable, just keep on staying silent. Someone will break the silence and the team will eventually function on its own.&lt;/p&gt;
&lt;p&gt;I could go on with a dozen examples, but I believe that the message is clear. Facilitate the session as a servant leader and fly below the radar as much as possible.&lt;/p&gt;
&lt;h3 id=&#34;consider-breaking-the-ice&#34;&gt;
    &lt;a href=&#34;#consider-breaking-the-ice&#34;&gt;#&lt;/a&gt;
    Consider breaking the ice
&lt;/h3&gt;&lt;p&gt;Being physically present in a room follows that people have already talked to each other before the start of the session. Perhaps they just went out to get a cup of coffee or they were discussing in their offices, after the sprint review. However, this is obviously not the case in a remote session.&lt;/p&gt;
&lt;p&gt;Keep in mind that people need to feel comfortable before entering a session, let alone a retrospective. Breaking the ice can go a long way in this case. Instead of directly jumping to setting the stage and starting the retrospective, consider having some small talk first. Anything ranging from the weather and sports to the sprint review that just took place will do. Just make sure that people feel relaxed and ready to chat.&lt;/p&gt;
&lt;h3 id=&#34;make-sure-everyone-contributes&#34;&gt;
    &lt;a href=&#34;#make-sure-everyone-contributes&#34;&gt;#&lt;/a&gt;
    Make sure everyone contributes
&lt;/h3&gt;&lt;p&gt;Every individual has a unique personality. Chances are that in a scrum team the spectrum of these personalities is going to be very broad. Naturally, some team members will open up more easily than others. However, it is crucial for the success of the retrospective to have everyone contributing. Unfortunately, it is easier for a closed person to &amp;ldquo;hide&amp;rdquo; and remain a spectator during a remote retrospective than during a colocated one. This is a problem that requires attention and very careful manoeuvring from the scrum master. Remember, that failing to address this can lead to losing a great part of the value of the session.&lt;/p&gt;
&lt;p&gt;Initially, make sure than during the &lt;em&gt;set the stage&lt;/em&gt; step, everyone speaks and seems engaged and comfortable to contribute. Then, I would propose to choose the exercises very carefully. Prefer the ones that work in a round-robin fashion over the ones the require initiative form individuals. For instance, it is more likely to have  everyone contributing in an &lt;em&gt;I like - I wish&lt;/em&gt; kind of exercise, during which all members are required to speak at their own turn than in a &lt;em&gt;5-why analysis&lt;/em&gt;. During the latter, the same people could be asking and answering the questions throughout the whole exercise. Lastly, if nothing works and you notice that people remain passive, try to stimulate them. Ask them for their opinion on the matter or if they have something else to contribute that is not already heard.&lt;/p&gt;
&lt;p&gt;In any case, this matter requires very delicate moves. Try hard not to be intrusive. When people feel judgement is being passed on them, they might feel offended and distance themselves even more. At all times, keep in mind that &lt;em&gt;empathy is a key scrum master quality&lt;/em&gt;. Try to get into their shoes and do the best to help them and the team.&lt;/p&gt;
&lt;h2 id=&#34;follow-up&#34;&gt;
    &lt;a href=&#34;#follow-up&#34;&gt;#&lt;/a&gt;
    Follow-up
&lt;/h2&gt;&lt;p&gt;After a fruitful session, a lot of ideas have been expressed and heard, a lot of discussions have taken place and a few action items have been produced as an outcome. It&amp;rsquo;s always a good idea to &lt;em&gt;follow-up the session&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Perhaps an email or even just a slack message will do. Just make sure that the retrospective is summarized and the action items are clear. This will create a sense of a completed work to the team and will emphasize the importance of following up on the work done during the retrospective. After all, the retrospective, apart from a summary of the sprint that just finished, is also the very last action on it.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;
    &lt;a href=&#34;#conclusion&#34;&gt;#&lt;/a&gt;
    Conclusion
&lt;/h2&gt;&lt;p&gt;Running a retrospective for a geographically distributed team is very different from running one for a colocated team. However, with the proper care and organization, it can be as fruitful. Focusing on engagement is crucial for the success of the session. It&amp;rsquo;s easier for people to remain &amp;ldquo;hidden&amp;rdquo; when being remote and technical issues may add unexpected obstacles. A good real-time collaboration tool and a wise selection of exercises and format can be extremely beneficial to the outcome of the session. As in colocated sessions, facilitation is the key to a successful and fruitful retrospective.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Dealing with technical debt in an agile environment</title>
        <link>//localhost:1313/dealing-with-technical-debt-in-an-agile-environment/</link>
        <pubDate>Sun, 27 Jan 2019 00:00:00 +0000</pubDate>
        
        <guid>//localhost:1313/dealing-with-technical-debt-in-an-agile-environment/</guid>
        <description>&lt;img src="//localhost:1313/img/posts/technical_debt.jpg" alt="Featured image of post Dealing with technical debt in an agile environment" /&gt;&lt;p&gt;How many times have you experienced software engineering teams that, regardless of the reasons, opted for quick solutions, resulting in poor code quality and created problems that accumulated over time? Where did this lead?&lt;/p&gt;
&lt;p&gt;Eventually, the product resembles an iceberg. The stakeholders can only see the end result, the behavior of the system, the part of the iceberg that lies above the surface, unaware of what lies underneath it. However, the software engineers have the full picture. They know every aspect of the system and they understand the need to take some extra time to tide things up a bit more than usually once in a while.&lt;/p&gt;
&lt;p&gt;On the other hand, the stakeholders, happy with the current image above the surface, most likely will never request to devote effort (time and money) to get (what they perceive as) a perfectly working product to a better shape, especially in the short loops of agile software development, in which they expect tangible business value every few weeks.&lt;/p&gt;
&lt;p&gt;It seems like a dead end, but a truly professional team of software engineers should never allow themselves to result in such a situation. It&amp;rsquo;s their &lt;em&gt;responsibility&lt;/em&gt; to be proactive about it. Let&amp;rsquo;s take things slow though and discuss a little bit about technical debt.&lt;/p&gt;
&lt;h2 id=&#34;what-is-it&#34;&gt;
    &lt;a href=&#34;#what-is-it&#34;&gt;#&lt;/a&gt;
    What is it
&lt;/h2&gt;&lt;p&gt;The term technical debt refers to all the things in a code base that could (and should) be improved, but do not directly affect the behavior of the system. It&amp;rsquo;s the things that the software engineers know should be done in a different, better way, but either chose to defer for the future or realized later on.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Technical debt is code written today that requires more effort in the future&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This resembles a lot a bank loan, in which an individual gets money today that require more money (initial amount plus interest) in the future to pay off, essentially creating debt.&lt;/p&gt;
&lt;p&gt;The term &lt;em&gt;technical debt&lt;/em&gt; is a metaphor, referring to quick win software solutions that will slow development down in the future in order to pay the debt off. Also, since typically future amendments require more time than it would be originally required to provide a proper solution, the debt is accumulated and paid with interest. Not paying the debt usually results in loosing the product, as the code base eventually becomes either &lt;em&gt;unmaintainable&lt;/em&gt; or &lt;em&gt;too expensive&lt;/em&gt; to maintain.&lt;/p&gt;
&lt;h2 id=&#34;where-does-it-come-from&#34;&gt;
    &lt;a href=&#34;#where-does-it-come-from&#34;&gt;#&lt;/a&gt;
    Where does it come from
&lt;/h2&gt;&lt;p&gt;There ways in which technical debt can be created are numerous and very diverse. Some are easier to spot and even prevent, some are quite tricky and some are inevitable.&lt;/p&gt;
&lt;h3 id=&#34;unprofessional-technical-debt&#34;&gt;
    &lt;a href=&#34;#unprofessional-technical-debt&#34;&gt;#&lt;/a&gt;
    Unprofessional technical debt
&lt;/h3&gt;&lt;p&gt;An easy to spot (and, most importantly, prevent) way of creating technical debt is simply not taking the time to do our job in the right way. Every time we opt for a &lt;em&gt;hack&lt;/em&gt;, a &lt;em&gt;quick-and-dirty&lt;/em&gt; solution, a &lt;em&gt;workaround&lt;/em&gt;, every time we &lt;em&gt;skip some unit tests&lt;/em&gt; or &lt;em&gt;do not refactor&lt;/em&gt; the code, we create debt. Every time we are sloppy with our work because someone says that &lt;em&gt;&amp;ldquo;this is urgent&amp;rdquo;&lt;/em&gt; or &lt;em&gt;&amp;ldquo;needs to be done by today&amp;rdquo;&lt;/em&gt; and we succumb to this pressure, we create future troubles for our team and our organization.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Every time we cut corners, we create technical debt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I am trying to put as much emphasis as I can to it and be harsh. Of course, coming up with a way to improve code or identify weaknesses is not only natural, but welcomed, especially as we become more mature. However, &lt;em&gt;wittingly&lt;/em&gt; applying discounts - therefore creating this type of technical debt -  is, in my opinion, absolutely &lt;strong&gt;unprofessional&lt;/strong&gt; and &lt;strong&gt;irresponsible&lt;/strong&gt;. Deliberately undermining our code quality to reduce time to market is an approach that will come back to bite us in the future. Period.&lt;/p&gt;
&lt;h3 id=&#34;outdated-design-technical-debt&#34;&gt;
    &lt;a href=&#34;#outdated-design-technical-debt&#34;&gt;#&lt;/a&gt;
    Outdated design technical debt
&lt;/h3&gt;&lt;p&gt;Sometimes we start off with simple and robust design and architecture for the initial requirements of the system, but as time goes by and increments are added, we fail to adjust the design and architecture in a proportional way. This phenomenon is more likely to occur when new developers join the team and do not fully understand the original design.&lt;/p&gt;
&lt;p&gt;While this can be prevented too (by taking the time to adjust the architecture as we develop the system) it is not unlikely at all that (even when applying frequent incremental refactorings) there will be a point in time when more drastic changes are needed.&lt;/p&gt;
&lt;h3 id=&#34;software-grew-old-technical-debt&#34;&gt;
    &lt;a href=&#34;#software-grew-old-technical-debt&#34;&gt;#&lt;/a&gt;
    Software grew old technical debt
&lt;/h3&gt;&lt;p&gt;Technology races forward in an astonishing pace these days and therefore we may find ourselves with a dependency that will become deprecated in the upcoming release (a database driver for instance). There is not much we can do about it and no one is to blame really. We should just take the time to keep our dependencies up to date. Of course, doing so &lt;em&gt;proactively&lt;/em&gt; is much preferable to  waiting for a deprecation announcement.&lt;/p&gt;
&lt;h2 id=&#34;there-will-always-be-technical-debt&#34;&gt;
    &lt;a href=&#34;#there-will-always-be-technical-debt&#34;&gt;#&lt;/a&gt;
    There will always be technical debt
&lt;/h2&gt;&lt;p&gt;Of course, trying to always be technical debt free is simply &lt;em&gt;delusional&lt;/em&gt;. Databases deprecate their old driver versions, systems grow enough to require that architecture should be revised and no matter how exceptionally we write a piece of code, as we grow more experienced and knowledgeable, we will always identify weakness and better ways to write it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If we look back to a piece of code we wrote a year ago and find nothing that we would do in a different, better way today, perhaps we have remained stagnant for the past year.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, technical debt will present itself no matter how professional and diligent we are.&lt;/p&gt;
&lt;h2 id=&#34;and-its-ok&#34;&gt;
    &lt;a href=&#34;#and-its-ok&#34;&gt;#&lt;/a&gt;
    And it&amp;rsquo;s OK
&lt;/h2&gt;&lt;p&gt;This is a fact and we have to accept it. After all, we should always bear in mind that the iterative nature of shipping software is built on the foundation of feedback. We solve the problem, we deliver the solution, get feedback on it and then try to improve it. Trying to ship a &lt;em&gt;perfect&lt;/em&gt; product will result in a tail chase.&lt;/p&gt;
&lt;p&gt;Technical debt, comes hand in hand with agile products and innovation. Sometimes we have to prototype solutions. Most of the times we have to get a feature out quickly, just to get feedback and learn what the users really want (after all they usually don&amp;rsquo;t know what they want either, until they have a prototype to play with). This will create technical debt and we have to find our peace with it and embrace it.&lt;/p&gt;
&lt;p&gt;Of course, this is fundamentally different from ignoring it and just letting the code rot. On the contrary, it is something that should be dealt with, because it costs. And &lt;em&gt;it costs a lot&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;how-costly-is-it&#34;&gt;
    &lt;a href=&#34;#how-costly-is-it&#34;&gt;#&lt;/a&gt;
    How costly is it
&lt;/h2&gt;&lt;p&gt;A team or a product can be severely hurt by technical debt in multiple ways. Unfortunately, these problems tend to steadily grow under the radar and only become visible when it&amp;rsquo;s too late. Let&amp;rsquo;s discuss the ones I believe are the worst ones.&lt;/p&gt;
&lt;h3 id=&#34;development-slows-down&#34;&gt;
    &lt;a href=&#34;#development-slows-down&#34;&gt;#&lt;/a&gt;
    Development slows down
&lt;/h3&gt;&lt;p&gt;What happens to a system when the code slowly rots? As Uncle Bob explains, it is becoming difficult to change. A single modification ignites a chain reaction that causes a cascade of modifications in dependent modules. The system is resisting to change. It is becoming &lt;em&gt;rigid&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The more rigid a system becomes, the more development slows down. Gradually features  require more and more effort to be implemented. The stakeholders have to &lt;strong&gt;wait more to get value&lt;/strong&gt; and &lt;strong&gt;features become more expensive&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;reduced-quality&#34;&gt;
    &lt;a href=&#34;#reduced-quality&#34;&gt;#&lt;/a&gt;
    Reduced quality
&lt;/h3&gt;&lt;p&gt;To make matters worse, developing features in a rigid system is far more error prone. Introducing defects is more likely in a highly coupled, complicated, rotten design than in a clean, frequently refactored one. This is observed as &lt;strong&gt;reduced quality&lt;/strong&gt;, which although cannot be measured, can be &lt;em&gt;felt&lt;/em&gt; by the stakeholders. In extreme cases, this can even result in &lt;strong&gt;performance issues&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;demoralization&#34;&gt;
    &lt;a href=&#34;#demoralization&#34;&gt;#&lt;/a&gt;
    Demoralization
&lt;/h3&gt;&lt;p&gt;I saved the most sneaky and costly one for last. Chances are that a well taken care of piece of code will remain so and future software engineers that will touch it will go to great lengths to keep its quality high. On the other hand, sloppiness and low quality propagate tremendously fast within a code base. A badly written, poor quality, piece of code will most likely tempt the next software engineer to work on it to opt for a hack, or a quick-and-dirty solution. Andy Hunt and Dave Thomas use a great metaphor of &lt;em&gt;a broken window&lt;/em&gt; to describe exactly this phenomenon in their book, &lt;a class=&#34;link&#34; href=&#34;https://www.goodreads.com/book/show/4099.The_Pragmatic_Programmer&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&amp;ldquo;The Pragmatic Programmer&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The poorer the quality, the faster more and more technical debt will accumulate, &lt;em&gt;demoralizing&lt;/em&gt; the team and rendering the code a nightmare for any software engineer. This is a typical situation, which, more often than not, results in the &lt;strong&gt;best people leaving&lt;/strong&gt; the product (usually the company as well) and set off for new adventures. This is not only costly for the product, but for the organization as well.&lt;/p&gt;
&lt;h2 id=&#34;how-to-deal-with-it&#34;&gt;
    &lt;a href=&#34;#how-to-deal-with-it&#34;&gt;#&lt;/a&gt;
    How to deal with it
&lt;/h2&gt;&lt;p&gt;Having said all these, how are we going to approach such a tricky situation? The stakeholders definitely will not ask us to take time to address technical debt.&lt;/p&gt;
&lt;p&gt;Mapping it to actual value can be a solution, but it usually turns out to be quite difficult. For instance, updating the database driver can improve the performance of the application, but how can we transform this into a measurable, well defined Product Backlog Item (PBI) that presents &lt;em&gt;business value&lt;/em&gt;? How faster is the application going to be and how beneficial is this to the business anyway? Even if this can be achieved, how about refactoring to improve the application&amp;rsquo;s design? There is no way we can present tangible business value out of it. &lt;em&gt;But it does reflect to business value in a shocking way.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There are multiple approaches, but let me present you mine. I suggest to reserve a corner of your scrum board for technical debt. Have every team member that comes across technical debt, write a sticky note about it and stick it to this corner. Also, take some time to discuss about it with the rest of the team (perhaps in the upcoming daily scrum). During planning, take this debt corner into consideration. When asked to refine, estimate or plan a PBI that (even remotely) touches an area with technical debt, &lt;em&gt;include this debt sticky note in the PBI&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This method will not only make the team address technical debt in a proactive manner, dealing with it in the first chance, therefore keeping the code in a relatively good shape. It will also facilitate in working with the stakeholders to educate them on the value of software quality.&lt;/p&gt;
&lt;p&gt;The latter may sound minor in comparison to the former, but sometimes it is the greater good between the two. An educated group of stakeholders is more likely to support software engineers in doing their job the right way.&lt;/p&gt;
&lt;p&gt;Finally, this method ensures that problems will never pile up and cause troubles. If an area needs improvement, it will be improved on the next task that touches it. Therefore, a situation in which an issue is added on top of an already existing one, is ruled out by definition.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;
    &lt;a href=&#34;#conclusion&#34;&gt;#&lt;/a&gt;
    Conclusion
&lt;/h2&gt;&lt;p&gt;The accumulation of technical debt is a very sneaky problem, present in almost every code base. Negligence will accelerate the process, but even the most diligent group of engineers will not avoid the problem. Therefore, we have to embrace its presence. However, it can prove immensely costly, not only drastically reducing code quality and productivity, but also driving the best engineers out out of the product. So, it should be addressed.&lt;/p&gt;
&lt;p&gt;Making it a part of our agile loop ensures that time will be taken to deal with it, people will become educated on it and it will be dealt with proactively. Regardless of the approach, letting technical debt accumulate and eventually cause serious problems to the product is not only a pity and wasteful, but also utterly unprofessional.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Driving fruitful retrospectives</title>
        <link>//localhost:1313/driving-fruitful-retrospectives/</link>
        <pubDate>Sat, 10 Nov 2018 00:00:00 +0000</pubDate>
        
        <guid>//localhost:1313/driving-fruitful-retrospectives/</guid>
        <description>&lt;img src="//localhost:1313/img/posts/fruitful_retros.jpg" alt="Featured image of post Driving fruitful retrospectives" /&gt;&lt;p&gt;How many times have you found yourself engaged in a retrospective, wondering why do you lose all this time? How many times have you committed to action items that no one ever dealt with in any way? How many times have you caught your team or yourself discussing the same issues again and again thinking that this will not be the last time?&lt;/p&gt;
&lt;p&gt;Retrospectives are very hard-to-drive meetings. The hurdles to overcome are countless. Team members that will not open up, team members that dominate the conversation, inability to identify root causes, lack of commitment to action items, frustration and politics, just to name a few. Sometimes the Jocker (Scrum Master) has to display a great arsenal to keep all of these under control and - above all - meaningful.&lt;/p&gt;
&lt;p&gt;My intention in this blog post is to share part of the knowledge, experience and lessons learned by driving retrospectives. Despite mainly referring to people facilitating these sessions (Scrum Masters), I believe that all members of a scrum team could benefit by it. Throughout this post, I will be referring to sprint retrospectives, but these principles, more or less apply to all kinds of retrospectives (release retrospectives, departmental retrospectives etc).&lt;/p&gt;
&lt;h2 id=&#34;the-goal&#34;&gt;
    &lt;a href=&#34;#the-goal&#34;&gt;#&lt;/a&gt;
    The Goal
&lt;/h2&gt;&lt;p&gt;Before we even begin talking about how to carry out successful retrospectives, let&amp;rsquo;s think for a moment why we have them in the first place. This meeting is a key part of the ever ending &lt;em&gt;inspect and adapt&lt;/em&gt; loop. It&amp;rsquo;s the team&amp;rsquo;s official slot reserved for thinking what we did during the last sprint and how could we improve it.&lt;/p&gt;
&lt;p&gt;Bear in mind that this is the &lt;em&gt;last resort&lt;/em&gt; for improvement. The proper moment is &lt;em&gt;any&lt;/em&gt; moment. As soon as we know that something could be improved, we should try to improve it right away. When you come across any pain point, don&amp;rsquo;t forget that &lt;strong&gt;the retrospective is now!&lt;/strong&gt; However, this runs the great risk of never prioritizing and never doing it and therefore, the sprint retrospective is there to force us to work on these issues.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The goal of a retrospective is to produce action items&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;structure&#34;&gt;
    &lt;a href=&#34;#structure&#34;&gt;#&lt;/a&gt;
    Structure
&lt;/h2&gt;&lt;p&gt;One of the great pitfalls to be avoided is not preparing a retrospective before facilitating it. Structure and preparation are &lt;strong&gt;key&lt;/strong&gt; to the success of the retrospective and there is a reason for it. Team members often get emotional or carried away when engaged in retrospective conversations (they are supposed to after all) and it can be very easy to lose sight of the goal and spend the session in a meaningless way.&lt;/p&gt;
&lt;p&gt;Always make sure that you know &lt;strong&gt;exactly&lt;/strong&gt; how the session unfolds relative to the schedule. Is it going too slow? Are we spending too much time on this topic? How far behind are we? Can we cover it and in which way? &lt;em&gt;Always make sure that there is enough time to reach to action items.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In an ideal situation, a mature team should be able to walk into the retrospective and just share their thoughts, drive the discussion to conclusions and action items, commit on working on them and move on with the following sprint. However, since this is barely realistic, I always use exercises to put the team in the right context and help them focus on identifying &lt;em&gt;strengths&lt;/em&gt; and &lt;em&gt;weaknesses&lt;/em&gt;. An excellent source of exercises is &lt;a class=&#34;link&#34; href=&#34;https://retromat.org&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;retromat&lt;/a&gt;. In the vast majority of the retrospectives I have facilitated, I have broken the structure down to the following five sections.&lt;/p&gt;
&lt;h3 id=&#34;set-the-stage&#34;&gt;
    &lt;a href=&#34;#set-the-stage&#34;&gt;#&lt;/a&gt;
    Set the stage
&lt;/h3&gt;&lt;p&gt;&lt;em&gt;Usually, 5-10 minutes for a 90-minute retrospective, depending on the team size&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Take the time to communicate the purpose of the session and the schedule. It may sound redundant, but it will help the team members orient themselves during the retrospective and focus on the task in hand for the following period of time.&lt;/p&gt;
&lt;p&gt;Usually, I ask for a very brief check-in phrase or input (e.g. describe the previous sprint in 3 words). Simplistic as it may sound, keep in mind that there may be people in the room that are hard to open up. As Scrum Masters, we should always make sure that every team member feels comfortable to speak and is engaged in the team exercise. This is what I focus on during this short phase. &lt;strong&gt;Get everyone onboard for what&amp;rsquo;s about to follow&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;gather-data&#34;&gt;
    &lt;a href=&#34;#gather-data&#34;&gt;#&lt;/a&gt;
    Gather data
&lt;/h3&gt;&lt;p&gt;&lt;em&gt;Usually, 20-25 minutes for a 90-minute retrospective, depending on the team size&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is the time to identify &lt;em&gt;what went wrong&lt;/em&gt; (or could just be improved) and &lt;em&gt;what did the team do well&lt;/em&gt; (this is also very important).&lt;/p&gt;
&lt;p&gt;Use an exercise that focuses on &lt;strong&gt;plain facts&lt;/strong&gt;. Ask for both negative and positive facts. As it is important to amend any problematic areas, it is equally important to preserve the good habits. Preferably, before discussing, allow the team some time to silently think and jot down a few things on sticky notes, in order to avoid affecting each other&amp;rsquo;s thought in this part. If necessary, you may feed the team by mentioning one or two defective ares that you recognized during the sprint, prior to the exercise, to get them going and accelerate results, but be very careful &lt;em&gt;not to guide them&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This is an extremely important step, as it will feed the rest of the retrospective with data. If the team fails to come up with the right issues here, it is almost inevitable that the real issues will remain untouched, no matter how great the effort in the rest of the session.&lt;/p&gt;
&lt;h3 id=&#34;generate-insights&#34;&gt;
    &lt;a href=&#34;#generate-insights&#34;&gt;#&lt;/a&gt;
    Generate insights
&lt;/h3&gt;&lt;p&gt;&lt;em&gt;Usually, 20-25 minutes for a 90-minute retrospective, depending on the team size&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Having identified the major pain points in the previous step, it&amp;rsquo;s time to address them. The point of this step is to come up with potential solutions to these pain points, but &lt;em&gt;do not neglect to preserve the good habits&lt;/em&gt; as well.&lt;/p&gt;
&lt;p&gt;Pick an exercise to help the team interpret the data gathered from the previous step and &lt;em&gt;come up with action items&lt;/em&gt; to both address the problems and preserve the good habits. Usually, I avoid a lot of conversation and interaction up to this point to keep the process of gathering the data impartial, but this is the point to &lt;em&gt;allow collaboration to kick in&lt;/em&gt; (e.g. working in pairs or have a lot of conversation). Make sure the team members are interacting in a productive way. If the items from the previous step are too many, ask the team to prioritize them and work the list top to bottom until the allocated time (or the list) runs out. Ideally, by the end of this step a list with ideas (solutions to problems, things to start/stop/continue doing etc) is composed and lies visible to the team (e.g. sticky notes on the wall, whiteboard etc).&lt;/p&gt;
&lt;p&gt;Always keep in mind that this is the very heart of the retrospective. Tension may be caused, strong arguments may take place. This is healthy and desired, but always make sure that the situation is under control and is actually going somewhere. As a Scrum Master, make sure that personal attacks are avoided, only productive arguments are hold and the team mainly deals with items that is actually empowered to change.&lt;/p&gt;
&lt;h3 id=&#34;decide-what-to-do&#34;&gt;
    &lt;a href=&#34;#decide-what-to-do&#34;&gt;#&lt;/a&gt;
    Decide what to do
&lt;/h3&gt;&lt;p&gt;&lt;em&gt;Usually, 20-25 minutes for a 90-minute retrospective, depending on the team size&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Presumably, most of the hard work is over. A list of action items is in the team&amp;rsquo;s hands. What is left is to decide on a reasonable amount of action items to work on the upcoming sprint.&lt;/p&gt;
&lt;p&gt;In this step, I always like using exercises that foster collaboration (and conversation) and create clear, unambiguous results. For instance, an &lt;a class=&#34;link&#34; href=&#34;https://retromat.org/en/?id=88&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;impediments cup&lt;/a&gt; facilitates &lt;em&gt;prioritizing action items&lt;/em&gt;, creating a &lt;em&gt;clear result&lt;/em&gt; and &lt;em&gt;engage in discussion&lt;/em&gt; while doing so.&lt;/p&gt;
&lt;p&gt;Basically, this is a matter of prioritization. All action items are useful, but the team has to commit to a reasonable number of them. This depends on a lot of factors (size of the team, difficulty of the action item, sprint length etc). Make sure that the decisions are taken collaboratively (but not chase after consent, as it can kill the retrospective) and the reasons for them are clear to the team. Additionally, be very careful not to use a process that creates winners and losers, as this can hurt morale.&lt;/p&gt;
&lt;h3 id=&#34;close-the-retrospective&#34;&gt;
    &lt;a href=&#34;#close-the-retrospective&#34;&gt;#&lt;/a&gt;
    Close the retrospective
&lt;/h3&gt;&lt;p&gt;&lt;em&gt;Usually, 5-10 minutes for a 90-minute retrospective, depending on the team size&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This step can be used to both &lt;em&gt;get feedback on the retrospective&lt;/em&gt; and &lt;em&gt;close the session in a light tone&lt;/em&gt;. It&amp;rsquo;s very likely that as problems surfaced, people opened up, things got tense and there were disagreements. This was very desired indeed, but as the session draws to a close, the point is to leave all these behind, keep all the hard work and close in a good mood in order to begin the next sprint.&lt;/p&gt;
&lt;p&gt;Any very brief exercise will do for this part. Just make sure that as you achieve the above-mentioned goal, you&amp;rsquo;re not tiring an already exhausted team. Preferably, choose a fun and invigorating exercise.&lt;/p&gt;
&lt;h2 id=&#34;smart-action-items&#34;&gt;
    &lt;a href=&#34;#smart-action-items&#34;&gt;#&lt;/a&gt;
    SMART action items
&lt;/h2&gt;&lt;p&gt;Perhaps the biggest pitfall for a retrospective is to come up with action items that are not &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/SMART_criteria&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;SMART&lt;/a&gt;. There is a huge difference between &lt;em&gt;action items&lt;/em&gt; and &lt;em&gt;wishful thinking&lt;/em&gt;. For instance, consider the following two outcomes of a team&amp;rsquo;s retrospective:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Improve collective ownership of the code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;No self merges. All code will be reviewed by at least one more engineer before being merged. Bob will monitor it and in the next retrospective will let us know if we succeeded or not.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Do you see the difference? For an action item to be meaningful, it has to be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Specific&lt;/li&gt;
&lt;li&gt;Measurable&lt;/li&gt;
&lt;li&gt;Agreed upon&lt;/li&gt;
&lt;li&gt;Realistic&lt;/li&gt;
&lt;li&gt;Trackable&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dealing-with-silent-team-members&#34;&gt;
    &lt;a href=&#34;#dealing-with-silent-team-members&#34;&gt;#&lt;/a&gt;
    Dealing with silent team members
&lt;/h2&gt;&lt;p&gt;Getting people to open up can be one of the trickiest tasks for a Scrum Master, but it constitutes a key ingredient for a fruitful retrospective. People may be quiet due to their personality or because they choose to remain silent for their own purposes. Both cases are difficult to handle, but each requires a different approach.&lt;/p&gt;
&lt;p&gt;When dealing with team members that are shy or not very outgoing, remember to work hard with them while &lt;em&gt;setting the stage&lt;/em&gt;. Before leaving this step, make sure that they have shared something with the group. This will make them feel more engaged and will increase the probability that they will share more during the retrospective. If necessary, during the retrospective, explicitly ask them to comment on a topic, especially if you know that they have an opinion on the matter, but they are obviously reluctant to share it.&lt;/p&gt;
&lt;p&gt;When people remain silent driven by politics, the spectrum of options is considerably narrowed down. What I feel is useful is to state once again that the purpose of this session is to improve as a team and in order to do so, sincere input and respect by everyone is a prerequisite. However, an individual who chooses to play his own game most likely will not change his path by such a speech. I would also suggest to drive the rest of the team to open her up.&lt;/p&gt;
&lt;h2 id=&#34;dealing-with-team-members-that-dominate-the-conversation&#34;&gt;
    &lt;a href=&#34;#dealing-with-team-members-that-dominate-the-conversation&#34;&gt;#&lt;/a&gt;
    Dealing with team members that dominate the conversation
&lt;/h2&gt;&lt;p&gt;On the other hand, having a team member that simply dominates all conversation is a definite disaster for the outcome of the retrospective. A team member may do so either wittingly or unwittingly. In any case, find a suitable point in her speech and &lt;em&gt;interrupt&lt;/em&gt; her. Make sure you are very polite, but firmly explain that this session cannot work like this and the team will lose sight of the goal in this manner. Strive to achieve that discussion is as evenly as possible distributed throughout the group and &lt;em&gt;all have a fair chance of expressing themselves&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This is not an easy situation to be in. No matter how polite you are, chances are that the person you interrupt will feel offended (even if she doesn&amp;rsquo;t show it), but do not yield to this thought. In the past, I have driven retrospectives that suffered for this exact reason, because I never summoned up the courage to interrupt this person. Hopefully, I&amp;rsquo;ve learned from my mistakes.&lt;/p&gt;
&lt;h2 id=&#34;keep-the-conversation-productive&#34;&gt;
    &lt;a href=&#34;#keep-the-conversation-productive&#34;&gt;#&lt;/a&gt;
    Keep the conversation productive
&lt;/h2&gt;&lt;p&gt;The moment the conversation is derailed, the retrospective is immediately jeopardized. Having team members aimlessly discussing instead of trying to reach to the root cause of problems and solve them can be a disaster. Personal attacks and conflicts can cause this. Make sure that you are very strict on this and put the team back on track as soon as you realize it. Additionally, discussing on items that are out of the team&amp;rsquo;s reach can also kill the retrospective. Make sure that you &lt;em&gt;spend no time on such topics&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A team that tends to frequently focus on items outside of its power is in danger of essentially wasting retrospective after retrospective dealing with issues that they will never be able to solve. Also, as they are convinced that an external factor is slowing them down, they run the risk of lowering their own morale and start feeling underprivileged. &lt;em&gt;Kill this as soon as you notice it&lt;/em&gt;. No matter how disastrous these external factors are, this is the time to focus on improving the internal team functioning. An excellent exercise to help you with this is &lt;a class=&#34;link&#34; href=&#34;https://retromat.org/en/?id=29&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Circles &amp;amp; Soup&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;avoid-creating-a-routine&#34;&gt;
    &lt;a href=&#34;#avoid-creating-a-routine&#34;&gt;#&lt;/a&gt;
    Avoid creating a routine
&lt;/h2&gt;&lt;p&gt;As soon as retrospective starts feeling like a routine, do something to disrupt this. During this session, we want team members to be creative and think outside of the box. A routine is the worst enemy of this.&lt;/p&gt;
&lt;p&gt;Always strive to keep the team energized and keep the blood flowing. Use exercises that require standing up and walking in the room. Keep it playful.  If possible, change the room or the time the retrospective takes place. Whatever you do, &lt;em&gt;do not create a routine&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;
    &lt;a href=&#34;#conclusion&#34;&gt;#&lt;/a&gt;
    Conclusion
&lt;/h2&gt;&lt;p&gt;Driving a retrospective is a very tricky business. However, retrospectives are key to the healthy functioning of an Agile team. Make sure to prepare beforehand and constantly keep in mind that the team should be after SMART action items. Don&amp;rsquo;t let it be derailed and the hard work is definitely going to pay off. Finally, never forget. &lt;em&gt;The retrospective is now&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;P.S. Feel free to share your thoughts or comment on mine. As always, I would very much love a nice, productive conversation on the topic.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Working the velocity of a scrum team</title>
        <link>//localhost:1313/working-the-velocity-of-a-scrum-team/</link>
        <pubDate>Sun, 23 Sep 2018 00:00:00 +0000</pubDate>
        
        <guid>//localhost:1313/working-the-velocity-of-a-scrum-team/</guid>
        <description>&lt;img src="//localhost:1313/img/posts/velocity.jpg" alt="Featured image of post Working the velocity of a scrum team" /&gt;&lt;p&gt;Scrum has gone wrong in a number of ways. This is a fact. Agile, an initiative born by software engineers, has turn into a new, &lt;em&gt;cool&lt;/em&gt; product management way. A considerable number of companies advertise that they use scrum when all they do is run a standing, 15-minute meeting in the morning and use sticky notes, being totally oblivious the true mindset of the framework as well as the immense benefits that it can provide.&lt;/p&gt;
&lt;p&gt;Among a lot of factors that have resulted to this, arguably the king of the problems is how people misunderstand the concept of the &lt;em&gt;velocity&lt;/em&gt; of a scrum team. Scrum Masters and Product Owners treat it as a productivity reporting tool, trying to make the development team &lt;em&gt;commit&lt;/em&gt; (we will discuss this &lt;em&gt;&amp;ldquo;commitment&amp;rdquo;&lt;/em&gt; issue in another post) to as high a number as possible, while the development team, feeling that they are judged by this number, struggle to increase it sprint by sprint. However, this is a &lt;strong&gt;fundamentally flawed&lt;/strong&gt; view.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Velocity is not a productivity reporting tool!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I wish I could stress this even more. &lt;strong&gt;Velocity is not a productivity reporting tool!&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Since I - once again - started with what velocity &lt;em&gt;is not&lt;/em&gt;, let&amp;rsquo;s proceed in a more conventional way and talk about what velocity actually &lt;em&gt;is&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;inspect-and-adapt&#34;&gt;
    &lt;a href=&#34;#inspect-and-adapt&#34;&gt;#&lt;/a&gt;
    Inspect and adapt
&lt;/h2&gt;&lt;p&gt;Let&amp;rsquo;s try to go back to the basics and essence of Scrum for a bit. In a nutshell, every couple of weeks (in reality this number ranges between 1 and 4 weeks, but for simplicity&amp;rsquo;s sake I will use 2 weeks for a sprint&amp;rsquo;s length throughout this post) the scrum team gathers with the stakeholders, reviewing their latest increment, inspecting the state of the product and refining the priorities. After this comes the retro and after the retro, the new sprint begins with a sprint planning session: the most important meeting in scrum.&lt;/p&gt;
&lt;p&gt;Now the scrum team should take into consideration the outcome of the sprint review and retrospective in order to commit to a new sprint. A new sprint, which should accommodate the prioritized requirements of the product, as defined by the stakeholders, whose voice in this meeting is the Product Owner. Let&amp;rsquo;s think of this for a moment. How is the scrum team supposed to commit to a couple of week&amp;rsquo;s worth of work without having an &lt;strong&gt;estimate&lt;/strong&gt; on the amount of work they can deliver in this time?&lt;/p&gt;
&lt;h2 id=&#34;sprint-planning&#34;&gt;
    &lt;a href=&#34;#sprint-planning&#34;&gt;#&lt;/a&gt;
    Sprint planning
&lt;/h2&gt;&lt;p&gt;In order to execute a sprint planning session meaningfully, there have to be two inputs: a &lt;strong&gt;refined Product Backlog&lt;/strong&gt; and the team&amp;rsquo;s calculated &lt;strong&gt;velocity&lt;/strong&gt; for the upcoming sprint. These will produce a single output: a &lt;strong&gt;sprint backlog&lt;/strong&gt;. The Scrum Master should see to this.&lt;/p&gt;
&lt;p&gt;Now it is becoming visible that the team&amp;rsquo;s velocity is &lt;em&gt;key&lt;/em&gt; to deciding on how many and which Product Backlog Items should the scrum team work on the upcoming sprint. This is an &lt;em&gt;indication&lt;/em&gt;, which the team should &lt;em&gt;consult&lt;/em&gt; when asking questions like &lt;em&gt;&amp;ldquo;is this amount of work a reasonable chunk for the upcoming sprint? Is it too much? Should we work on more items&amp;rdquo;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;If it is reasonable for one to assume that the team is able to successfully work on more items than they actually put in the sprint backlog, then the team is &lt;strong&gt;undercommitting&lt;/strong&gt; and therefore failing to honor their role as &lt;em&gt;professional&lt;/em&gt; software engineers. If the team is clearly committing on a sprint that will most likely fail to deliver, it is &lt;strong&gt;overcommitting&lt;/strong&gt;, failing once again to honor their role as &lt;em&gt;professional&lt;/em&gt; software engineers, as they create expectations for the stakeholders that they will not be met.&lt;/p&gt;
&lt;p&gt;This is exactly why velocity is &lt;strong&gt;critical&lt;/strong&gt; to the success of a sprint planning session and therefore to the success of the sprint. &lt;strong&gt;Velocity helps creating a sustainable pace&lt;/strong&gt;. This pace will neither burn the team out or leave it idle for too much. Additionally, it provides &lt;em&gt;confidence&lt;/em&gt; to the development team to estimate their upcoming work in &lt;em&gt;reasonable chunks&lt;/em&gt;. Chunks that they can actually deliver, therefore causing the &lt;em&gt;trust&lt;/em&gt; of the stakeholders in the development team to increase.&lt;/p&gt;
&lt;h2 id=&#34;calculating-the-teams-velocity&#34;&gt;
    &lt;a href=&#34;#calculating-the-teams-velocity&#34;&gt;#&lt;/a&gt;
    Calculating the team&amp;rsquo;s velocity
&lt;/h2&gt;&lt;p&gt;Now, having said all these, I hope that it is clear that monitoring the team&amp;rsquo;s velocity is very very important, but &lt;em&gt;who&lt;/em&gt; actually is responsible for this and &lt;em&gt;how&lt;/em&gt; can one do a good job on it? After all, no one can predict the future and the work that a group of people will produce in two weeks time seems quite hard to get right.&lt;/p&gt;
&lt;h3 id=&#34;who&#34;&gt;
    &lt;a href=&#34;#who&#34;&gt;#&lt;/a&gt;
    Who
&lt;/h3&gt;&lt;h4 id=&#34;the-scrum-masters-role&#34;&gt;
    &lt;a href=&#34;#the-scrum-masters-role&#34;&gt;#&lt;/a&gt;
    The Scrum Master&amp;rsquo;s role
&lt;/h4&gt;&lt;p&gt;The Scrum Master is sometimes called the &lt;em&gt;joker&lt;/em&gt; and part of the reason is that she has a lot of balls in the air at any given moment. One of these is that she is responsible for monitoring the team&amp;rsquo;s velocity and coming up with reasonable calculations for upcoming sprints as input in the sprint planning sessions.&lt;/p&gt;
&lt;h4 id=&#34;who-else-needs-to-know&#34;&gt;
    &lt;a href=&#34;#who-else-needs-to-know&#34;&gt;#&lt;/a&gt;
    Who else needs to know
&lt;/h4&gt;&lt;p&gt;I once was working in a company that used to start the sprint reviews with the following phrase: &amp;ldquo;Our estimated velocity for the past sprint was &amp;hellip; and our actual velocity was &amp;hellip;&amp;rdquo;. I &lt;strong&gt;completely disagree&lt;/strong&gt; with this (I had stated it a number of times)! Velocity is a piece of information that, in my opinion, concerns solely the scrum team members (perhaps excluding very few cases).&lt;/p&gt;
&lt;p&gt;The stakeholders definitely need &lt;strong&gt;not&lt;/strong&gt; know the velocity of the team. They only need to know that the team is maturing and &lt;em&gt;can be trusted&lt;/em&gt; in their estimates. Otherwise, this would only enforce the view that the development team&amp;rsquo;s productivity is being judged by their velocity (at least in their eyes).&lt;/p&gt;
&lt;p&gt;The Product Owner should learn the calculated number by the scrum master for the sprint planning purposes, but should not be concerned thereafter.&lt;/p&gt;
&lt;p&gt;The development team should learn the calculated number by the scrum master for the sprint planning purposes, but should not be concerned thereafter either.&lt;/p&gt;
&lt;h3 id=&#34;how&#34;&gt;
    &lt;a href=&#34;#how&#34;&gt;#&lt;/a&gt;
    How
&lt;/h3&gt;&lt;p&gt;Estimating the velocity of a scrum team for the upcoming sprint is not a straightforward task. Estimation by itself is not an easy task anyway. Needless to say, there is no silver bullet for it. But the good news is that there doesn&amp;rsquo;t have to be one. We&amp;rsquo;re not after a precise, infallible estimation. We&amp;rsquo;re after creating rhythm, building confidence and trust.&lt;/p&gt;
&lt;p&gt;A number of techniques are being daily applied by different Scrum Masters in different teams. None is right. None is wrong. Let me try to describe a technique that I have used for quite a long time and I find it useful.&lt;/p&gt;
&lt;h4 id=&#34;one-technique&#34;&gt;
    &lt;a href=&#34;#one-technique&#34;&gt;#&lt;/a&gt;
    One technique
&lt;/h4&gt;&lt;p&gt;In the heart of the technique lie statistical calculations based on empirical data. A number of factors that affect the estimated velocity, are literally plugged into an formula that produces the magic number. The factors are listed and explained below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Team members&lt;/strong&gt;: The number of members of the development team. Do not confuse this with the number of members of the scrum team, which will be different if either the Scrum Master or the Product Owner do not contribute to writing code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sprint duration&lt;/strong&gt;: The days which will be available for the scrum team to complete its work in the sprint. Personally, I do not include the day of the scrum events, as no code is written during this day.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No workdays&lt;/strong&gt;: Days during which the team will not be working during the sprint (e.g. bank holidays, conferences that the whole team attends etc)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Team holidays&lt;/strong&gt;: Days during a single team member will not contribute to the team&amp;rsquo;s work (e.g. annual leave). For instance, if a member has submitted annual leave for a day and another member for two days, this number will be 3.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Focus factor&lt;/strong&gt;: A number indicating how reliable the team&amp;rsquo;s commitments tend to be. I explain this factor in depth further on.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Actual work days&lt;/strong&gt; is produced by the following formula:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(Team members * Sprint duration) - (Team members * No workdays) - Team holidays&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Focus factor&lt;/strong&gt; is a bit more complicated. Basically, the piece of information that we want to take into consideration is the degree in which the team estimations match the actual work done. The reason for using more than one past sprints is that as teams change, as they mature they go through different phases. These affect their focus factor. For instance, as a new team member is integrated with the team, one would expect the focus factor to have an slightly increasing trend. The focus factor for a single sprint is provided by the following formula:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Actual velocity points / committed velocity points&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Finally, the formula producing the estimated velocity for the upcoming sprint is the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(Actual work days) * (average focus factor of the last x sprints)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;I usually use the average focus factor of the last 3 sprints (x = 3), but feel free to use any number of sprints that works for you&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;I find it very convenient to use an excel spreadsheet for these calculations. I just plug the numbers in every sprint and I have both the calculations ready and reliable metrics and statistics when I need them. (I have a template for this spreadsheet. Do not hesitate to ask me for it. I will gladly share it.)&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Never forget that this number is a statistical calculation. Reality is much more complex. So, before committing to a sprint backlog, &lt;strong&gt;always&lt;/strong&gt; make sure that the team believes that this is a reasonable chunk of work for the upcoming sprint. Ask them to forget about the number and actually do a gut feel. Don&amp;rsquo;t just blindly follow the output of any formula or technique.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Probably a couple of very reasonable questions have already formed into your mind, like &lt;em&gt;&amp;ldquo;What do we do on the first sprint, with no previous data existing yet?&amp;rdquo;&lt;/em&gt; or &lt;em&gt;&amp;ldquo;What if a new member joins the team?&amp;rdquo;&lt;/em&gt;. Let&amp;rsquo;s discuss these both.&lt;/p&gt;
&lt;h4 id=&#34;first-sprint&#34;&gt;
    &lt;a href=&#34;#first-sprint&#34;&gt;#&lt;/a&gt;
    First sprint
&lt;/h4&gt;&lt;p&gt;A very challenging period to estimate a team&amp;rsquo;s velocity is right after the team is formed. After all, there are no previous data whatsoever. There is no silver bullet for this problem either, but I would propose the following method: make sure that for the first few sprints the team bluntly &lt;strong&gt;overcommits&lt;/strong&gt;. Not slightly overcommitting, but estimate a profoundly unreasonable amount of work. Explain to the team that this is happening for precise reasons and no one is expecting them to deliver this mountain of work. Protect them from destroying their morale! Now, over the first sprints (I believe roughly 3 will suffice), the current ability of the team will become clear. When confident, stop this and use a proper method for calculating the velocity, like the one described above.&lt;/p&gt;
&lt;h4 id=&#34;new-team-member&#34;&gt;
    &lt;a href=&#34;#new-team-member&#34;&gt;#&lt;/a&gt;
    New team member
&lt;/h4&gt;&lt;p&gt;A usually confusing case is when a new software engineer joins the development team. Intuition suggests that the team&amp;rsquo;s velocity should increase. After all, there is one more engineer now, right? This is true, but in the long term. On the contrary, over the first few sprints, it is more likely that velocity will drop. Obviously, the new engineer, no matter how skillful, is not going to be productive right away. To make matters worse, the current engineers will have to both spend time on her orientation and keep on carrying out their regular work. This leaves them with less time to do the latter. Therefore, the most likely scenario is that velocity will drop slightly for the first few sprints and then gradually catch up and probably exceed the previous numbers (of course this also depends on how the new team will glue together, but this is another post).&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;
    &lt;a href=&#34;#conclusion&#34;&gt;#&lt;/a&gt;
    Conclusion
&lt;/h2&gt;&lt;p&gt;Perceiving velocity as a productivity reporting tool is &lt;strong&gt;flat-out wrong&lt;/strong&gt;. Productivity is measured indeed, but not for reporting. Just for internal use within the team. Use it to create a sustainable pace, to help the team deliver on a steady basis, create trust and mature the team. The actual method for calculating the velocity for upcoming sprints does not matter. There are loads of techniques out there. Either pick one or create your own. Just make sure that you use it in the right way and it helps the team.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Technical background: the extra mile on scrum mastery</title>
        <link>//localhost:1313/technical-background-the-extra-mile-on-scrum-mastery/</link>
        <pubDate>Fri, 22 Jun 2018 00:00:00 +0000</pubDate>
        
        <guid>//localhost:1313/technical-background-the-extra-mile-on-scrum-mastery/</guid>
        <description>&lt;img src="//localhost:1313/img/posts/extra_mile.jpg" alt="Featured image of post Technical background: the extra mile on scrum mastery" /&gt;&lt;p&gt;Among other things, scrum is very &lt;em&gt;&amp;ldquo;trendy&amp;rdquo;&lt;/em&gt; lately. Virtually any company that I know of has either adopted it or attempted to do so or at least considered it. The software industry needs change rapidly, evolving the scrum master in one of the most sought after roles. However, the inability of the offer to meet the demand and the absence of required technical skills to become a scrum master has made the role appealing to a number of people outside the industry, giving birth to an ongoing debate. &lt;em&gt;Should the scrum master have a technical background?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The scrum guide does not prescribe technical skills as a prerequisite for a scrum master. However, desired qualifications in vacancies range from concrete experience as a software developer to no technical requirements specified at all.&lt;/p&gt;
&lt;p&gt;Before we endeavor to address the topic, let&amp;rsquo;s take a step back and think a little bit of &lt;em&gt;Agile&lt;/em&gt;. Why do all these people and companies favor Agile over waterfall? After all, waterfall was used for so many successful projects. This can be a surprisingly hard to answer question for a lot of people.&lt;/p&gt;
&lt;p&gt;In my opinion, the key benefit is the establishment of a &lt;strong&gt;short feedback loop&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Daily stand-ups, open space offices and loads of sticky notes only serve to alter the process, being merely means to an end. &lt;em&gt;The short feedback loop is an end in itself.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Agile suggests that we leave behind the old days when the requirements were specified all upfront and the developers worked isolated for a few months only to deliver software needing change. A very short loop is established, allowing for a small chunk of software to be produced, inspected by the stakeholders, adapt to their feedback and repeat the cycle. &lt;strong&gt;Indefinitely.&lt;/strong&gt; &lt;em&gt;The illusion of the end state is eliminated.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This radical process modification requires profound changes in the heart of our work. Potentially, the most common pitfall is to change the process, but continue writing code in exactly the same way. A lot of companies, perhaps unwittingly, opt for only changing the process, starting walking down a road that is doomed to lead to failure. The scrum master enters here, forced to distance herself from solely the process and look at the bigger picture.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Guarding the process is essential, but it means nothing without guarding the practices that lead to better software quality.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Of course, quality cannot be measured, but there are disciplines that lead to it. Pair programming, test driven development (TDD), refactoring and code reviews among others, bring a set of very important advantages like collective code ownership, improved code design, living documentation (tests) and automated regression test suites (more on this on &lt;a class=&#34;link&#34; href=&#34;https://nvoulgaris.com/agile-code&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Agile code&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Returning to the original question, in my opinion, technical background is a critical skill for a scrum master. Things are rarely black or white, but how is a scrum master coming from (say) a business school able to deeply understand the importance of TDD? Why would she value pair programming against the common belief that it slows the team down? How is she in a position to understand the significance and implications of deploying on production or how much does a defect cost and how it should be prioritized and treated by the team?&lt;/p&gt;
&lt;p&gt;Now, don&amp;rsquo;t get me wrong. I don&amp;rsquo;t mean that the scrum master should be an expert software engineer, but a &lt;em&gt;decent level of familiarization with the complex field of software engineering would be really beneficial to the team.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Of course, the team itself should be primarily responsible for these techniques, but I wouldn&amp;rsquo;t want a scrum master just to set the meetings up, book the room and bring the sticky notes. I want one who is &lt;strong&gt;enabling&lt;/strong&gt; the team to work in a better, more efficient way. One that is &lt;strong&gt;coaching&lt;/strong&gt; the team members and &lt;strong&gt;guards&lt;/strong&gt; the process and practices in a meaningful way, &lt;em&gt;encouraging increased code quality.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This post is based on a presentation I gave on the &lt;a class=&#34;link&#34; href=&#34;https://www.meetup.com/Agile-Greece/events/250188126&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;39th Athens Agile/Scrum Meetup&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Agile code</title>
        <link>//localhost:1313/agile-code/</link>
        <pubDate>Sat, 20 Jan 2018 00:00:00 +0000</pubDate>
        
        <guid>//localhost:1313/agile-code/</guid>
        <description>&lt;img src="//localhost:1313/img/posts/todo.jpg" alt="Featured image of post Agile code" /&gt;&lt;p&gt;During Christmas, just a few days before I decided to take up blogging, I was reading Sandro Mancuso&amp;rsquo;s excellent book &lt;a class=&#34;link&#34; href=&#34;https://www.goodreads.com/book/show/18054154-software-craftsmanship&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Software Craftsmanship&lt;/a&gt;. I couldn&amp;rsquo;t help but agree (sometimes even out loud) when reading what Sandro describes as the Agile Hangover. How many companies decide to become &lt;em&gt;agile&lt;/em&gt; only to find their projects failing for the very same reasons that urged them to become &lt;em&gt;agile&lt;/em&gt; in the first place? What are the common characteristics of so many failed attempts? What is it that goes so wrong anyway?&lt;/p&gt;
&lt;h2 id=&#34;what-is-agile-anyway&#34;&gt;
    &lt;a href=&#34;#what-is-agile-anyway&#34;&gt;#&lt;/a&gt;
    What is Agile anyway?
&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Agile&lt;/em&gt; is a notion so frequently used these days in the software engineering industry that has ended up being misunderstood. It would come as no surprise to me if one asked 5 people for the true meaning of this so called &lt;em&gt;agility&lt;/em&gt; and gathered 5 different answers. Let me endeavor to explain the way &lt;em&gt;I perceive agile&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Before &lt;em&gt;agile&lt;/em&gt;, managers and (if lucky) representatives of the development team entered a meeting room in order to discuss (and agree on) any potential aspect and detail of an upcoming project, documenting everything. Then, the development team would come up with a plan to implement everything that document described. Therefore, they would &amp;ldquo;lock&amp;rdquo; themselves up, pursuing the coveted end state, which, of course, was thoroughly described in the document. After the implementation completion (which included a considerably large testing period), the outcome was delivered to the customer, finally engaging in a feedback loop, only to find out that - guess what - change was needed (let alone that half the features were not needed and would never be used). By its nature, this approach is cumbersome and does not embrace change. Locking yourself to a plan and blindly sticking with it jeopardizes becoming outdated with respect to new priorities. Think about it. How soon in the process can the customer realize that a change is needed? How can this be accommodated  in the above mentioned life cycle? How can this model deal with changing priorities?&lt;/p&gt;
&lt;p&gt;In February 2001, seventeen people got together to discuss (what they perceived as) the problem in the way we build software and, by composing the &lt;em&gt;Agile&lt;/em&gt; Manifesto, proposed a mindset centered around the creation of a short feedback loop. Therefore, the newly proposed idea proposed that we do not blindly stick to the (long term) plan anymore. We do a little bit of work, involve the customer seeking feedback, inspect the current state, adapt to the feedback and repeat the cycle.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The way change is perceived is fundamentally altered, embracing it instead of considering it undesired. Now change is turned into an opportunity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In my opinion, the key difference between the two approaches lies in the fact that &lt;em&gt;agile&lt;/em&gt; detaches the software from the illusion of the end state. There is no end state. There will never be one.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As long as the business is live, the software lives and evolves with it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;making-a-company-agile&#34;&gt;
    &lt;a href=&#34;#making-a-company-agile&#34;&gt;#&lt;/a&gt;
    Making a company Agile
&lt;/h2&gt;&lt;p&gt;Being influenced is not a bad thing on its own. Blindly (or even worse, dogmatically) embracing a new idea is what I consider one of the greatest pitfalls out there tough. Being influenced is great, so long as one filters and challenges everything. Deciding to undergo the vast transformation that is required for a company in order to become &lt;em&gt;agile&lt;/em&gt; needs to go through some extra filtering. Knowing &lt;em&gt;why&lt;/em&gt; should it go after such a radical transformation and therefore, what is expected out of it are keys to the its success. Needless to say, just because it is trendy or some other company did it successfully do not suffice as reasoning. Sometimes, a bit of constructive criticism could be just what is needed to get us on the right track on understanding these &lt;em&gt;why&lt;/em&gt; and &lt;em&gt;what&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Usually, companies that haven&amp;rsquo;t got into the trouble of clarifying these &lt;em&gt;why&lt;/em&gt; and &lt;em&gt;what&lt;/em&gt; prior to embarking on the transformation, find themselves hiring an &lt;em&gt;agile&lt;/em&gt; coach who is supposed to magically move his wand, speak the right words and&amp;hellip; boom! We&amp;rsquo;re &lt;em&gt;agile&lt;/em&gt; now. More often than not, a few months later, they find themselves with a shiny new process, but writing code in the exact same way and facing the same old problems. A few more months later, they find themselves wondering why this &lt;em&gt;agile&lt;/em&gt; transformation did not pay off and why does it still take so long to solve a critical bug on production. Why is there a critical bug on production in the first place?&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t get me wrong here. Changing the process is valuable, but we should never forget that the process is a means to an end. The goal is the software! In order to reach the standards we want in software, we should first change the process, but making sure that all along this brings a mindset shifting too. Perhaps hiring an &lt;em&gt;agile&lt;/em&gt; coach was the correct move to make after all. However, he should be one with technical expertise, able to lead a mindset shifting, reflecting in the way that code is written in the company. As Albert Einstein would definitely point out, writing code in the same way and expecting different results just because we changed the process is pure insanity.&lt;/p&gt;
&lt;h2 id=&#34;disciplines&#34;&gt;
    &lt;a href=&#34;#disciplines&#34;&gt;#&lt;/a&gt;
    Disciplines
&lt;/h2&gt;&lt;p&gt;During his keynote speech on Agile Greece Summit 2017, Uncle Bob (Robert Martin) talked about a set of disciplines that every developer should follow in order to seal our profession as best as possible from future misfortunes. He even gave us an oath. I will not give you any oath, but I would like to focus on a set of disciplines. Specifically, I would like to shift our attention to the disciplines that will improve the quality of our code. However, before we talk about quality, we should first make sure that we understand it.&lt;/p&gt;
&lt;p&gt;Quality is a very hard to understand notion. What is quality after all? Can one measure it? In my humble opinion, despite the fact that quality is not a tangible entity there are signs that one can notice and know that the situation is improving (happier customers, decreasing maintenance cost, faster features development, less bugs in production just to name a few). I believe that in order to start noticing these sings, we should strive to adhere to a set of disciplines. Extreme programming (XP) comes with a powerful arsenal of practices that can get us on the right track. Let&amp;rsquo;s briefly go over a few:&lt;/p&gt;
&lt;h3 id=&#34;pair-programming&#34;&gt;
    &lt;a href=&#34;#pair-programming&#34;&gt;#&lt;/a&gt;
    Pair programming
&lt;/h3&gt;&lt;p&gt;If practiced right, it can be one of the most valuable assets of a development team. How many times have you heard a phrase like &lt;em&gt;&amp;ldquo;We have to modify and redeploy the payment module, but Chris is the owner of it and he&amp;rsquo;s out of office today, snorkeling on the reef.&amp;rdquo;&lt;/em&gt;? Well, I guess we could either equip Chris with a waterproof mobile or struggle for &lt;strong&gt;collective ownership&lt;/strong&gt; on our code.&lt;/p&gt;
&lt;p&gt;Pair programming guarantees this result, along with a series of benefits like &lt;strong&gt;improved code design, team cohesion, mentoring and fewer interruptions&lt;/strong&gt;. Unfortunately, people tend to just sit next to each other and believe that they are practicing pair programming. So, if you do practice it, make sure you do it right. Do you share a common keyboard? Does one focus on the big picture, reviewing every line that the other is typing? Do you trade roles frequently? Perhaps you play &lt;a class=&#34;link&#34; href=&#34;http://wiki.c2.com/?PairProgrammingPingPongPattern&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ping pong&lt;/a&gt;? Do you learn from each other? How often do you switch pairs?&lt;/p&gt;
&lt;h3 id=&#34;test-driven-development&#34;&gt;
    &lt;a href=&#34;#test-driven-development&#34;&gt;#&lt;/a&gt;
    Test Driven Development
&lt;/h3&gt;&lt;p&gt;How can we be &lt;em&gt;agile&lt;/em&gt; if we don&amp;rsquo;t have an automated suite of tests? If, instead of having self-testing code, manual work is needed to verify that the system behaves as expected? If there is not a single button to verify the whole application and sign it off for production? If testing the whole system requires hours? How &lt;em&gt;agile&lt;/em&gt; can we be then?&lt;/p&gt;
&lt;p&gt;TDD is a workflow that emphasizes on making us write &lt;strong&gt;the best code that we can write&lt;/strong&gt; (by constantly asking &lt;em&gt;&amp;ldquo;can you make it better?&amp;rdquo;&lt;/em&gt;&amp;quot;). If practiced right, it encourages &lt;strong&gt;better design&lt;/strong&gt; (more cohesive and loosely coupled components), provides &lt;strong&gt;documentation&lt;/strong&gt; (via executable examples, a.k.a. tests) and, when done with a feature, the &lt;strong&gt;automated regression test suite&lt;/strong&gt; comes for free.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As if the above mentioned are not sufficient, I could never stress enough the importance of &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Shift_left_testing&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;left shift&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;continuous-integration&#34;&gt;
    &lt;a href=&#34;#continuous-integration&#34;&gt;#&lt;/a&gt;
    Continuous integration
&lt;/h3&gt;&lt;p&gt;How quickly can we get our latest code, safely to production? How often do we have to integrate our code and face conflicts while doing so? &lt;em&gt;We should always be working on the latest version of  the code&lt;/em&gt;. We should frequently push to our Version Control Systems (VCS) and check the code out in order to avoid delays and nightmare conflicts later on. Having a continuous integration system helps us work in a more &lt;em&gt;professional&lt;/em&gt; way.&lt;/p&gt;
&lt;h3 id=&#34;code-review&#34;&gt;
    &lt;a href=&#34;#code-review&#34;&gt;#&lt;/a&gt;
    Code review
&lt;/h3&gt;&lt;p&gt;At least two people should sign the code off. Review the code often. Make sure that the team trusts one another as it will free them to be relentless, which will only work to the team&amp;rsquo;s benefit.&lt;/p&gt;
&lt;p&gt;Use different review styles: over the shoulder review, pair programming or an official session, with the whole team present, dedicated to the task. Whichever the style, &lt;strong&gt;review in essence!&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Challenge the code design, propose alternatives and work the trade-offs that they present themselves.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Talk about performance, maintainability, business needs (without meaning that code formatting for instance should be neglected). Plan a review early enough to provide sufficient time to adapt to changes.&lt;/p&gt;
&lt;h3 id=&#34;refactoring&#34;&gt;
    &lt;a href=&#34;#refactoring&#34;&gt;#&lt;/a&gt;
    Refactoring
&lt;/h3&gt;&lt;p&gt;Martin Fowler, in his wonderful book &lt;a class=&#34;link&#34; href=&#34;https://www.goodreads.com/book/show/44936.Refactoring&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Refactoring: Improving the Design of Existing Code&lt;/a&gt;, explains that before adding a new feature to our system, we should first ask ourselves if the current design of the system is ready to accommodate this new feature. If not, &lt;em&gt;we should refactor it&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Create a suite of tests to act as a safety net, change the system in small steps (keeping the tests green in all steps) and make sure that the value of the software increases (other software engineers understand the code, maintenance is easier and development of new features is faster). Keep on doing so &lt;em&gt;mercilessly&lt;/em&gt;, until the code meets the requirements.&lt;/p&gt;
&lt;p&gt;Martin Fowler&amp;rsquo;s &lt;a class=&#34;link&#34; href=&#34;https://www.goodreads.com/book/show/44936.Refactoring&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;book&lt;/a&gt; is an excellent read and despite being written around the time that the Agile Manifesto was being formed, the ideas in the book are remarkably relevant.&lt;/p&gt;
&lt;p&gt;These techniques and practices are a few among many, and to go through them all exhaustively would be beyond the scope of this blog post. However, it is vital to understand that they are not an end in itself. The goal is to go out there and experiment with them. Study them and challenge them, but eventually pick the ones that enable us to improve the quality of the software that we produce. Adopt them and use them wisely.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;
    &lt;a href=&#34;#conclusion&#34;&gt;#&lt;/a&gt;
    Conclusion
&lt;/h2&gt;&lt;p&gt;Being &lt;em&gt;agile&lt;/em&gt; is trendy. This is not a bad thing on its own. Deciding to become &lt;em&gt;agile&lt;/em&gt; just because it is trendy is truly one of the worst decisions an organization can make. We should investigate and understand the fundamental aspects that it touches before we decide to undergo such a radical transformation. Understanding that software does not have an end state is fundamental. On the contrary, it is like a living organization. It will keep on changing and we will constantly have to reform and reshape it to meet the ever changing business needs. As a matter of fact, the better it meets these needs, the more it will have to change (more feature requests, more traffic etc).&lt;/p&gt;
&lt;p&gt;Becoming &lt;em&gt;agile&lt;/em&gt; can be a great leap, but in order for it to be successful, we have to apply the changes deep down to the heart of our organization and not only to its skin. We have to change the mindset of the people and the way we write code. We have to write code in a way that embraces change, in the same way our shiny new process does. We have to go out there and search for the practices that best suit our needs, apply them, learn and start over.&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
